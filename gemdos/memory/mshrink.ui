!iflang [english]


!begin_node Mshrink
(!begin_liste) [Availability]
!item [Name:]
ØMemory shrinkÆ - Reduce or enlarge a memory block.

!item [Opcode:]
74

!item [Syntax:]
int32_t Mshrink ( void *block, int32_t newsiz );

!item [Description:]
The (!nolink [GEMDOS]) routine Mshrink reduces or enlarges an already
reserved memory block in the (!nolink [GEMDOS]) free list. The following
apply:

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [block]
Start address of the memory block
!item [newsiz]
New (changed) length of the block; (!B)in (!nolink [MagiC])
additionally:(!b)
!begin_xlist !short [-1 =]
!item [-1 =]
Obtain the largest possible size of the memory block
!item [~0 =]
Release block
!end_xlist
!end_xlist

(!B)Note:(!b) As a rule no check is made whether the memory block really
belongs to the caller. The option to (!I)enlarge(!i) a memory block is only
available in MagiC at present. However this only works if a large enough
free block is present above the block in question, and the
(!nolink [TOS])-compatibility has been deactivated.

!item [(!nolink [Return]) value:]
The function can return the following results:

!begin_xlist !short [EIMBA :]
!item [E_OK :]
No error has arisen
!item [EIMBA :]
Invalid memory block address
!item [EGSBF :]
Block was enlarged
!end_xlist

!item [Availability:]
All (!nolink [GEMDOS]) versions.

!item [Group:]
Memory management

!item [See also:]
(!link [Binding] [Bindings for Mshrink]) ~ Malloc ~ Mfree
(!ende_liste)


!begin_node Bindings for Mshrink
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Mshrink ( void *block, int32_t newsiz );

!item [Assembler:]
!begin_verbatim
move.l    newsiz,-(sp)  ; Offset 8
pea       block         ; Offset 4
move.w    #0,-(sp)      ; Offset 2
move.w    #74,-(sp)     ; Offset 0
trap      #1            ; GEMDOS
lea       $C(sp),sp     ; Correct stack
!end_verbatim
(!B)Note:(!b) The NULL-parameter is normally added automatically in a C
binding.
(!ende_liste)
!end_node
!end_node


!else


!begin_node Mshrink
(!begin_liste) [Beschreibung]
!item [Name:]
Ømemory shrinkÆ - Speicherbereich verkÅrzen oder vergrîûern.

!item [Gemdosnummer:]
74

!item [Deklaration:]
int32_t Mshrink ( void *block, int32_t newsiz );

!item [Beschreibung:]
Die GEMDOS-Routine Mshrink verkÅrzt oder vergrîûert einen bereits
reservierten Speicherbereich. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [block]
Anfangsadresse des Speicherblocks
!item [newsiz]
neue (geÑnderte) LÑnge des Blocks; (!B)in (!nolink [MagiC]) zusÑtzlich:(!b)
!begin_xlist !short [-1 =]
!item [-1 =]
 ermitteln der grîûtmîglichen Grîûe des Speicherblocks
!item [~0 =]
 Block freigeben
!end_xlist
!end_xlist

(!B)Hinweis:(!b) Es wird i.d.R. nicht ÅberprÅft, ob der Speicherblock dem
Aufrufer Åberhaupt gehîrt. Die Mîglichkeit einen Speicherblock zu
(!I)vergrîûern(!i), steht z.Zt. nur in MagiC zur VerfÅgung. Allerdings
funktioniert dies nur, wenn Åber dem betreffenden Block ein genÅgend groûer
freier Block vorhanden ist, und die TOS-KompatibilitÑt deaktiviert wurde.

!item [Ergebnis:]
Die Funktion liefert folgende Resultate:

!begin_xlist !short [EIMBA :]
!item [E_OK :]
kein Fehler aufgetreten
!item [EIMBA :]
falsche Blockadresse
!item [EGSBF :]
Block wÅrde vergrîûert
!end_xlist

!item [VerfÅgbar:]
Alle (!nolink [GEMDOS]) Versionen.

!item [Gruppe:]
Speicherverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Mshrink]) ~ Malloc ~ Mfree
(!ende_liste)


!begin_node Bindings fÅr Mshrink
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Mshrink ( void *block, int32_t newsiz );

!item [Assembler:]
!begin_verbatim
move.l    newsiz,-(sp)  ; Offset 8
pea       block         ; Offset 4
move.w    #0,-(sp)      ; Offset 2
move.w    #74,-(sp)     ; Offset 0
trap      #1            ; GEMDOS aufrufen
lea       $C(sp),sp     ; Stack korrigieren
!end_verbatim
(!B)Hinweis:(!b) Der Null-Parameter wird beim C-Binding normalerweise
automatisch hinzugefÅgt.
(!ende_liste)
!end_node
!end_node


!endif
