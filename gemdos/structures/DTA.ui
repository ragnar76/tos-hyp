!iflang [english]


!begin_node DTA

This structure is defined as follows:

!begin_verbatim
typedef struct
{
    int8_t    d_reserved[21];  /* Reserved for GEMDOS */
    uint8_t   d_attrib;        /* File attributes     */
    uint16_t  d_time;          /* Time                */
    uint16_t  d_date;          /* Date                */
    uint32_t  d_length;        /* File length         */
    int8_t    d_fname[14];     /* Filename            */
} DTA;
!end_verbatim

(!B)Recursive search in folders(!b)

In each DTA, all required information is stored that is required after a
Fsfirst for further Fsnext calls. That means that one should never call
(!nolink [Fsfirst]) anew for other directories/wildcards as long as further
(!nolink [Fsnext]) calls are made in the same directory.(!nl)
For a recursive search one must use a new DTA for each new
(!nolink [Fsfirst]), which must be maintained until all (!nolink [Fsnext])
for the (!nolink [Fsfirst]) have been made. Here an example in pseudo-C:

!begin_verbatim
void search_directory (int8_t *pfadname)
{
  DTA_Record local_dta, saved_dta;

  saved_dta = GetDTA ();
  SetDTA (local_dta);

  err = Fsfirst (pfadname, ...);
  while (err == 0) {
    if (local_dta.attrib == subdir) {
      // recursive search in sub-dir
      search_directory (subdir-pfadname);
    } else {
      ... evaluate normal file
    }
    err = Fsnext ();
  }

  SetDTA (saved_dta);
}
!end_verbatim

See also: Fgetdta ~ Fsetdta ~ Fsfirst ~ Fsnext ~ GEMDOS
!end_node


!else


!begin_node DTA

Diese Struktur ist wie folgt definiert:

!begin_verbatim
typedef struct
{
    int8_t    d_reserved[21];  /* fÅr GEMDOS reserviert */
    uint8_t   d_attrib;        /* Datei-Attribut        */
    uint16_t  d_time;          /* Uhrzeit               */
    uint16_t  d_date;          /* Datum                 */
    uint32_t  d_length;        /* DateilÑnge            */
    int8_t    d_fname[14];     /* Dateiname             */
} DTA;
!end_verbatim

(!B)rekursive Suche in Ordnern(!b)

In je einer DTA werden genau alle nîtigen Informationen gespeichert, die
nach einem (!nolink [Fsfirst]) fÅr weitere (!nolink [Fsnext]) benîtigt
werden. Das heiût, daû auf keinen Fall erneut (!nolink [Fsfirst]) fÅr andere
Verzeichnisse/Wildcards aufrufen sollte, solange noch weitere
(!nolink [Fsnext])-Aufrufe in der Verzeichnis-Ebene gemachen werden. (!nl)
Bei einer rekursiven Suche muût fÅr jedes neue (!nolink [Fsfirst]) eine
eigene DTA verwendet werden, die solange erhalten bleiben muû, bis alle
(!nolink [Fsnext]) fÅr den (!nolink [Fsfirst]) getÑtigt sind.
Hier ein Bsp in pseudo-C:

!begin_verbatim
void durchsuche_verzeichnis (int8_t *pfadname)
{
  DTA_Record local_dta, saved_dta;

  saved_dta = GetDTA ();
  SetDTA (local_dta);

  err = Fsfirst (pfadname, ...);
  while (err == 0) {
    if (local_dta.attrib == subdir) {
      // rekursive suche in sub-dir
      durchsuche_verzeichnis (subdir-pfadname);
    } else {
      ... normales file auswerten
    }
    err = Fsnext ();
  }

  SetDTA (saved_dta);
}
!end_verbatim

Querverweis: Fgetdta ~ Fsetdta ~ Fsfirst ~ Fsnext ~ GEMDOS
!end_node


!endif
