!iflang [english]

!begin_node Tsettimeofday
(!begin_liste) [Availability]
!item [Name:]
ØTsettimeofdayÆ - Sets the state of the internal, high resolution system
clock.
!item [Opcode:]
342 (0x0156)

!item [Syntax:]
int32_t Tsettimeofday ( timeval *tv, timezone *tzp );

!item [Description:]
The function Tsettimeofday sets the state of the internal, high resolution
system clock.

The argument (!I)tv(!i) is a pointer to the timeval structure.

The argument (!I)tzp(!i) is a pointer to the timezone structure.

You may safely pass NULL for either argument. This isn't considered an error.

Implementors of library bindings should be aware that the definition of
struct (!nolink [timezone]) is non-standard. The members are actually int
and not long int (this applies only to struct (!nolink [timezone]); the
members of struct (!nolink [timeval]) are always long). 16-bit libraries
will have to copy the contents of the structure that (!I)tzp(!i) points to.

The tz_dsttime member of (!nolink [timezone]) is stored, but not evaluated
within the kernel. Beware not to misunderstand its meaning: if non-zero it
simply signifies that daylight savings time applies during some part of the
year, not necessarily now. In other words: if it is non-zero someday, it
should be non-zero during the entire year. The Ssystem call has a command
S_CLOCKMODE. This command allows retrieval or setting of the kernel clock
mode, i.e. to specify whether the hardware clock is meant to run in UTC or
in local time.(!nl)
It is planned to make MiNT compliant with the kernel timekeeping model
described in RFC1305. This model is already successfully implemented in
operating systems such as SunOS, Ultrix, OSF/1, HP-UX and Linux. Please
expect the internal realization to change in the future.

!item [(!nolink [Return]) value:]
The following error conditions are defined: 

EPERM - an attempt was made by a user without super-user 
privileges to change the system time or system time zone 
information.

EBADARG - one of the arguments is out of range.  Note that the 
kernel time cannot be set to dates before Jan 1 1980 00:00:00 and after 
some day in 2038 (yep, MAX_LONG seconds since the epoch). 
Timezone offsets must be in the range of +/- 720 minutes.

!item [Availability:]
Available when a MiNT kernel of a version at least 1.15.0 release is 
detected.

!item [Group:]
Date and Time

!item [See also:] (!link [Binding][Bindings for Tsettimeofday]) ~
Ssystem ~ Tgettimeofday
(!ende_liste)


!begin_node Bindings for Tsettimeofday
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Tsettimeofday ( timeval *tv, timezone *tzp );
!item [Assembler:]
!begin_verbatim
pea       tzp          ; Offset 6
pea       tv           ; Offset 2
move.w    #342,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
lea       $0a(sp),sp   ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node

!else

!begin_node Tsettimeofday
(!begin_liste) [Beschreibung]
!item [Name:]
ØTsettimeofdayÆ - sets the state of the internal, high resolution system clock.
!item [Gemdosnummer:]
342 (0x0156)

!item [Deklaration:]
int32_t Tsettimeofday ( timeval *tv, timezone *tzp );

!item [Beschreibung:]
This function sets the state of the internal, high resolution system clock.

The argument (!I)tv(!i) is a pointer to the timeval structure.

The argument (!I)tzp(!i) is a pointer to the timezone structure.

You may safely pass NULL for either argument. This isn't considered an error.

Implementors of library bindings should be aware that the definition of
struct (!nolink [timezone]) is non-standard. The members are actually int and not long 
int (this applies only to struct (!nolink [timezone]); the members of 
struct (!nolink [timeval]) are always long). 16-bit libraries will have to 
copy the contents of the structure that tzp points to.

The tz_dsttime member of (!nolink [timezone]) is stored, but not 
evaluated within the kernel. Beware not to misunderstand its meaning: 
if non-zero it simply signifies that daylight savings time apply during 
some part of the year, not necessarily now. In other words: if 
it is non-zero someday, it should be non-zero during the entire year.
The Ssystem() call has a command S_CLOCKMODE. This 
command allows to retrieve or set the kernel clock mode, i.e. to 
specify whether the hardware clock is meant to run in UTC or in local 
time. (!nl)
It is planned to make 
MiNT compliant with the kernel time keeping model described in RFC1305. 
This model is already successfully implemented in operating systems 
such as SunOS, Ultrix, OSF/1, HP-UX and Linux. Please expect the 
internal realization to change in the future.

!item [Ergebnis:]
The following error conditions are defined: 

EPERM - an attempt was made by a user without super-user 
privileges to change the system time or system time zone 
information.

EBADARG - one of the arguments is out of range.  Note that the 
kernel time cannot be set to dates before Jan 1 1980 00:00:00 and after 
some day in 2038 (yep, MAX_LONG seconds since the epoch). 
Timezone offsets must be in the range of +/- 720 minutes.

!item [VerfÅgbar:]
Available when a MiNT kernel of a version at least 1.15.0 release is 
detected.

!item [Gruppe:]
Datum und Uhrzeit

!item [Querverweis:] (!link [Binding] [Bindings fÅr Tsettimeofday]) ~
		Ssystem ~ Tgettimeofday
(!ende_liste)


!begin_node Bindings fÅr Tsettimeofday
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Tsettimeofday ( timeval *tv, timezone *tzp );
!item [Assembler:]
!begin_verbatim
pea       tzp          ; Offset 6
pea       tv           ; Offset 2
move.w    #342,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       $0a(sp),sp   ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
