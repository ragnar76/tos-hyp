!iflang [english]


!begin_node Pvfork
(!begin_liste) [Availability]
!item [Name:]
ØPvforkÆ - Create copy of the current process.

!item [Opcode:]
275

!item [Syntax:]
int16_t Pvfork ( void );

!item [Description:]
The function Pvfork creates a copy of the current process. Parent and child
process share the same address and data space, i.e. every change that the
child makes to variables will also affect the parent. The new process
starts its work when the function Pvfork returns.

Note that if the parent is in supervisor-mode when the call is made, the
child is placed in user-mode anyway.

As both processes share the same address space (and stack), problems would
arise if both ran at the same time. For this reason the parent is paused
until the child process is either terminated or uses Pexec (mode 200) to
write itself as a new process to a new address space.

!item [(!nolink [Return]) value:]
The function can return the following results:

!begin_xlist !short [ENSMEM:]
!item [E_OK~ :]
In child process
!item [>0~~~ :]
New process ID in parent process
!item [ENSMEM:]
Not enough memory available to create a new process
!end_xlist

!item [Availability:]
As of the first in MultiTOS integrated MiNT version 1.04.

!item [Group:]
Process functions

!item [See also:]
(!link [Binding][Bindings for Pvfork]) ~ Pexec ~ Pfork ~
(!link [Threads][Threads in MagiC])
(!ende_liste)


!begin_node Bindings for Pvfork
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int16_t Pvfork ( void );

!item [Assembler:]
!begin_verbatim
move.w    #275,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
addq.l    #2,sp        ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Pvfork
(!begin_liste) [Beschreibung]
!item [Name:]
ØPvforkÆ - Kopie des aktuellen Prozesses erstellen.

!item [Gemdosnummer:]
275

!item [Deklaration:]
int16_t Pvfork ( void );

!item [Beschreibung:]
Die Funktion erzeugt eine Kopie des aktuellen Prozesses. Parent- und
Childprozess teilen sich denselben Adressraum, d.h. jede énderung, die der
Child an Variablen vornimmt, betreffen auch den Parent. Der neue Prozess
beginnt seine Arbeit, wenn die Funktion Pvfork zurÅckkehrt.

Auch wenn der Parent diese Funktion aus dem Supervisormode aufruft, lÑuft
das Child im Usermode.

Da sich beide Prozesse den gleichen Adressraum (und Stack) teilen, gÑbe es
Probleme, wenn beide zur gleichen Zeit laufen wÅrden. Deshalb wird der
Parent angehalten, bis der Child-Prozess entweder beendet wird oder sich
mittels Pexec (Modus 200) selbst mit einem neuen Prozess in einem neuen
Adressraum Åberschreibt.

!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:

!begin_xlist !short [ENSMEM:]
!item [E_OK~ :]
im Child-Prozess.
!item [>0~~~ :]
neue Prozess-ID im Parent-Prozess.
!item [ENSMEM:]
nicht genug Speicher vorhanden, um den neuen Prozeû zu erzeugen.
!end_xlist

!item [VerfÅgbar:]
Seit der ersten in MultiTOS integrierten MiNT Version 1.04.

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:]
(!link [Binding][Bindings fÅr Pvfork]) ~ Pexec ~ Pfork ~
(!link [Threads][Threads in MagiC])
(!ende_liste)


!begin_node Bindings fÅr Pvfork
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int16_t Pvfork ( void );

!item [Assembler:]
!begin_verbatim
move.w    #275,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
