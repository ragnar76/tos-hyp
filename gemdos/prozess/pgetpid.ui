!iflang [english]

!begin_node Pgetpid
(!begin_liste) [Availability]
!item [Name:]
ØPgetpidÆ - Get current process ID.
!item [Opcode:]
267 (0x010b)
!item [Syntax:]
int16_t Pgetpid ( void );

!item [Description:]
The function Pgetpid returns the PID of the currently active (calling)
process, i.e. the one that currently 'owns' the CPU; this is the filetype
under which the current process is administered in the directory U:\PROC.

A PID is dynamically assigned to a process when it is created. You should
make no assumption on the PID a process may have. For the kernel, the PID is
a WORD but when you program in C, you should use the pid_t type, which
complies with the POSIX standard. The FreeMiNT kernel's PID is always 0.

The PID is useful when it is important to identify a process among others in
the system. Knowing the PID of a program, it is possible to do a lot of
things: send it a signal with Psignal(), look for its name in /proc by
searching with a "*.xxx" mask (xxx is the PID of the program which name we
wanna know), etc. 

!item [(!nolink [Return]) value:]
PID of the active processes.

!item [Availability:]
The function is available in (!nolink [MagiC]) from Version 3.0 on and under
MiNT.

!item [Group:]
Process functions

!item [See also:] (!link [Binding][Bindings for Pgetpid]) ~
          Pgetpgrp ~ Pgetppid
(!ende_liste)


!begin_node Bindings for Pgetpid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int16_t Pgetpid ( void );
!item [Assembler:]
!begin_verbatim
move.w    #267,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
addq.l    #2,sp        ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node

!else

!begin_node Pgetpid
(!begin_liste) [Beschreibung]
!item [Name:]
ØPgetpidÆ - aktuelle Prozess ID erfragen.
!item [Gemdosnummer:]
267 (0x010b)
!item [Deklaration:]
int16_t Pgetpid ( void );

!item [Beschreibung:]
Die Funktion liefert die PID des aktuell aktiven Prozesses, also desjenigen,
der momentan die CPU besitzt; es handelt sich dabei um den Dateityp, unter
dem der aktuelle Prozess im Verzeichnis U:\PROC gefÅhrt wird.

A PID is dynamically assigned to a process when it is created.
You should make no assumption on the PID a process may have.
For the kernel, the PID is a WORD but when you program in C, you
should use the pid_t type, which complies with the POSIX standard.
The FreeMiNT kernel's PID is always 0.
	    
	    
The PID is useful when it is important to identify a process
among others in the system. Knowing the PID of a program, it is
possible to do a lot of things: send it a signal with Psignal(), look
for its name in /proc by searching with a "*.xxx" mask (xxx is the
PID of the program which name we wanna know), etc. 

!item [Ergebnis:]
PID des aktiven Prozesses.

!item [VerfÅgbar:]
Sie steht in (!nolink [MagiC]) ab Version 3.0 und unter
MiNT zur VerfÅgung.

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:] (!link [Binding][Bindings fÅr Pgetpid]) ~
					Pgetpgrp ~ Pgetppid
(!ende_liste)


!begin_node Bindings fÅr Pgetpid
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int16_t Pgetpid ( void );
!item [Assembler:]
!begin_verbatim
move.w    #267,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
addq.l    #2,sp        ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node

!endif
