!iflang [english]


!begin_node Pmsg
(!begin_liste) [Availability]
!item [Name:]
ØPmsgÆ - Send and receive messages.

!item [Opcode:]
293

!item [Syntax:]
int32_t Pmsg ( int16_t mode, int32_t mbox, void *msg );

!item [Description:]
The function Pmsg sends or receives a message to or from a 'mail box'. The
operation to be executed in each case can be set with the bits of the
parameter (!I)mode(!i). The following apply:

!begin_xlist !short [0x0000]
!item [mode]
Operation
!item [~]
~
!item [0x0000]
Block the process and don't return until a message is read from the
specified mailbox (!I)mbox(!i) and placed in the structure pointed to by
(!I)msg(!i).
!item [0x0001]
Block the process and don't return until a process waiting for a message
with mailbox ID (!I)mbox(!i) has received the message from the structure
pointed to by (!I)msg(!i).
!item [0x0002]
Block the process until a process waiting for a message with the mailbox ID
(!I)mbox(!i) has received the message held in the structure pointed to by
(!I)msg(!i) and a return message is received with mailbox ID 0xffffxxxx
(where xxxx is the PID of the current process).
!item [0x8000]
An OR combination with this value allows the operation to be performed in a
non-blocking mode.
!end_xlist

The messages are 5 words long, namely two LONGwords and one SHORT (in that
order). For this the two LONGs can be filled with any desired information by
the process, while the SHORT should have the PID of the sender entered in
it.

After the message has been sent, this SHORT contains the PID of the process
that has read the message. Conversely, after reading a message it contains
the PID of the processes that wrote the message.

If (!I)mode(!i) has the highest bit set and no readers or writers for the
mailbox (!I)mbox(!i) exist, then the value -1 will be returned. Otherwise a
read operation waits until a message has been written, or a write operation
waits until a read process is ready.

Im (!I)mode 2(!i) the writer says that it would like to wait for a reply.
The idea behind this is that the process can put itself to sleep, and can be
reawakened later by the process that receives the message. This will
guarantee that the process that contains the original message is not blocked
when writing the reply.

!item [(!nolink [Return]) value:]
The function can return the following results:

!begin_xlist !short [EINVFN :]
!item [E_OK :]
No error has arisen
!item [EINVFN :]
Invalid value for the parameter (!I)mode(!i)
!item [-1 :]
Bit 15 is set, and Pmsg would block
!end_xlist

!item [Availability:]
Available when a 'MiNT' cookie with a version of at least 0.90 exists.

!item [Group:]
Process functions

!item [See also:]
(!link [Binding] [Bindings for Pmsg])
(!ende_liste)


!begin_node Bindings for Pmsg
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pmsg ( int16_t mode, int32_t mbox, void *msg );

!item [Assembler:]
!begin_verbatim
pea       msg          ; Offset 8
move.l    mbox,-(sp)   ; Offset 4
move.w    mode,-(sp)   ; Offset 2
move.w    #293,-(sp)   ; Offset 0
trap      #1           ; GEMDOS
lea       $C(sp),sp    ; Correct stack
!end_verbatim
(!ende_liste)
!end_node
!end_node


!else


!begin_node Pmsg
(!begin_liste) [Beschreibung]
!item [Name:]
ØPmsgÆ - Empfangen und Senden von Nachrichten.

!item [Gemdosnummer:]
293

!item [Deklaration:]
int32_t Pmsg ( int16_t mode, int32_t mbox, void *msg );

!item [Beschreibung:]
Die Funktion sendet bzw. empfÑngt eine Nachricht zu bzw. von einer Mailbox.
Die jeweils auszufÅhrende Operation kann Åber die Bits des Parameters
(!I)mode(!i) festgelegt werden. Es bedeutet:

!begin_xlist !short [0x0000]
!item [mode]
Operation
!item [~]
~
!item [0x0000]
Blockiert den Prozess bis aus der Åbergebenen Mailbox mit der ID
(!I)mbox(!i) eine Nachricht gelesen werden kann und speichert diese in der
Struktur, auf die (!I)msg(!i) zeigt.
!item [0x0001]
Blockiert den Prozess bis ein Prozess auf eine Nachricht aus der Mailbox
mit der ID (!I)mbox(!i) wartet und diese Nachricht aus der Struktur, auf
die (!I)msg(!i) zeigt, ausliest.
!item [0x0002]
Blockiert den Prozess bis ein Prozess auf eine Nachricht aus der Mailbox
mit der ID (!I)mbox(!i) wartet und diese Nachricht aus der Struktur, auf
die (!I)msg(!i) zeigt, ausliest und in der Mailbox mit der Kennung
0xffffxxxx eine Nachricht liegt (dabei ist xxxx die PID des aktuellen
Prozesses).
!item [0x8000]
Durch eine ODER-VerknÅpfung mit diesem Wert kann die Operation im
nicht-blockierenden Modus ausgefÅhrt werden.
!end_xlist

Die (!nolink [Nachrichten]) sind 5 Wîrter lang, und zwar zwei Langworte und ein Short
(in dieser Reihenfolge). Dabei kînnen die 2 Langwîrter vom Prozess mit
beliebiger Information gefÅllt werden, wÑhrend im Short die PID des Senders
einzutragen ist.

Nach dem die Nachricht verschickt worden ist, enthÑlt dieses Short die PID
des Prozesses, der die Nachricht gelesen hat. Umgekehrt enthÑlt dieser nach
dem Lesen einer Nachricht die PID des Prozesses, der die Nachricht
geschrieben hat.

Wenn in (!I)mode(!i) das hîchstwertige Bit gesetzt ist, und es keinen Leser
bzw. Schreiber fÅr die Mailbox (!I)mbox(!i) gibt, wird der Wert -1
zurÅckgeliefert. Anderenfalls wartet eine Leseoperation bis eine Nachricht
geschrieben wurde, bzw. eine Schreiboperation bis ein lesender Prozess
bereit ist.

Im Modus 2 gibt der Schreiber an, daû er auf eine Antwort warten mîchte. Die
Idee dabei ist, daû dieser Prozess sich schlafen legen kann, und zu einem
spÑteren Zeitpunkt von dem Prozess der die Nachricht erhÑlt, wieder
aufgeweckt werden kann. Dabei wird garantiert, daû der Prozess, welcher die
Original-Nachricht erhÑlt beim Schreiben der Antwort nicht blockiert wird.

!item [Ergebnis:]
Die Funktion kann folgende RÅckgabewerte liefern:

!begin_xlist !short [EINVFN :]
!item [E_OK :]
kein Fehler aufgetreten.
!item [EINVFN :]
ungÅltiger Wert fÅr den Parameter (!I)mode(!i).
!item [-1 :]
Bit-15 ist gesetzt, und Pmsg wÅrde blockieren.
!end_xlist

!item [VerfÅgbar:]
VerfÅgbar, wenn ein 'MiNT' Cookie mit einer Versionsnummer von mindestens
0.90 existiert.

!item [Gruppe:]
Prozessfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr Pmsg])
(!ende_liste)


!begin_node Bindings fÅr Pmsg
!ignore_index
(!begin_liste) [Assembler:]
!item [C:]
int32_t Pmsg ( int16_t mode, int32_t mbox, void *msg );

!item [Assembler:]
!begin_verbatim
pea       msg          ; Offset 8
move.l    mbox,-(sp)   ; Offset 4
move.w    mode,-(sp)   ; Offset 2
move.w    #293,-(sp)   ; Offset 0
trap      #1           ; GEMDOS aufrufen
lea       $C(sp),sp    ; Stack korrigieren
!end_verbatim
(!ende_liste)
!end_node
!end_node


!endif
