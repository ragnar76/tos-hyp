!iflang [english]

!begin_node wdlg_set_tree

(!begin_liste) [Availability]

!item [Name:]
ØWindow-dialog set treeÆ - Anchor a new object tree in the window-dialog

!item [Opcode:]
165 (sub-opcode 1)

!item [Syntax:]
int16_t wdlg_set_tree ( DIALOG *dialog, OBJECT *new_tree );

!item [Description:]
The call wdlg_set_tree anchors a new object tree in a window-dialog. The
following apply:

!begin_table [l|l]
Parameter !! Meaning
!hline
(!I)dialog(!i) !! Pointer to the dialog
(!I)new_tree(!i) !! New object tree
!end_table

(!B)Note:(!b) If the new root object has a different size, then the window size
will be adapted automatically; the window contents will be updated in every
case.

!item [(!nolink [Return]) value:]
The function always returns the value 1.

!item [Availability:]
The presence of this call should be checked for using
(!link [appl_getinfo][%apgi_7]) (Opcode 7).

!item [Group:]
Window-dialogs

!item [See also:]
(!link [Binding] [Bindings for wdlg_set_tree]) ~ wdlg_open ~ wdlg_close

(!ende_liste)



!begin_node Bindings for wdlg_set_tree
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wdlg_set_tree ( DIALOG *dialog, OBJECT *new_tree );

!item [Binding:]
!begin_verbatim
int16_t wdlg_set_tree ( DIALOG *dialog, OBJECT *new_tree )
{
   addr_in[0] = dialog;
   addr_in[1] = new_tree;

   int_in[0] = 1;
   crys_if (165);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 165   # Function opcode
control+2 !! control[1] !! 1     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 2     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
addr_in   !! addr_in[0] !! dialog
addr_in+4 !! addr_in[1] !! new_tree
int_in    !! int_in[0]  !! 1     # Sub-opcode
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wdlg_set_tree

(!begin_liste) [Beschreibung]

!item [Name:]
ØWindowDialog Set TreeÆ - neuen Objektbaum im Dialog verankern.

!item [AES-Nummer:]
165 (Unterfunktion 1)

!item [Deklaration:]
int16_t wdlg_set_tree ( DIALOG *dialog, OBJECT *new_tree );

!item [Beschreibung:]
Die Funktion verankert einen neuen Objektbaum in einem Dialog. Es gilt:

!begin_table [l|l]
Parameter !! Bedeutung
!hline
(!I)dialog(!i) !! Zeiger auf den Dialog
(!I)new_tree(!i) !! Neuer Objektbaum
!end_table

(!B)Hinweis:(!b) Falls das neue Wurzelobjekt eine andere Grîûe hat, wird die
Fenstergrîûe automatisch angepaût; der Fensterinhalt wird in jedem Fall
aktualisiert.

!item [Ergebnis:]
Die Funktion liefert stets den Wert 1 zurÅck.

!item [VerfÅgbar:]
Das Vorhandensein dieser Funktion kann per (!link [appl_getinfo][%apgi_7]) (Opcode 7)
festgestellt werden.

!item [Gruppe:]
Fensterdialoge

!item [Querverweis:]
(!link [Binding] [Bindings fÅr wdlg_set_tree]) ~  wdlg_open ~  wdlg_close

(!ende_liste)



!begin_node Bindings fÅr wdlg_set_tree
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wdlg_set_tree ( DIALOG *dialog, OBJECT *new_tree );

!item [Umsetzung:]
!begin_verbatim
int16_t wdlg_set_tree ( DIALOG *dialog, OBJECT *new_tree )
{
   addr_in[0] = dialog;
   addr_in[1] = new_tree;

   int_in[0] = 1;
   crys_if (165);

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 165   # Opcode der Funktion
control+2 !! control[1] !! 1     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 2     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
addr_in   !! addr_in[0] !! dialog
addr_in+4 !! addr_in[1] !! new_tree
int_in    !! int_in[0]  !! 1     # Unterfunktion
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
