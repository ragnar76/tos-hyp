!iflang [english]

!begin_node wdlg_create

(!begin_liste) [Availability]

!item [Name:]
ØWindow-dialog createÆ - Create a window-dialog

!item [Opcode:]
160

!item [Syntax:]
DIALOG *wdlg_create ( HNDL_OBJ handle_exit, OBJECT *tree, void *user_data,
                      int16_t code, void *data, int16_t flags );

!item [Description:]
The function wdlg_create allocates memory for a dialog structure and
initializes it. The following apply:

!begin_xlist !short [handle_exit]
!item [Parameter]
Meaning
!item [~]
~
!item [handle_exit]
Pointer to the service function
!item [tree]
Pointer to the object tree
!item [user_data]
Pointer to user info
!item [code]
Passed to (!I)handle_exit(!i)in HNDL_OBJ (!I)clicks(!i)
!item [data]
Passed to (!I)handle_exit(!i)in HNDL_OBJ (!I)data(!i)
!item [flags]
Various flags:
(!nl)
1 = Enable background operation
!end_xlist

!item [(!nolink [Return]) value:]
Pointer to the dialog structure.

!item [Availability:]
The presence of this call should be checked for using
(!link [appl_getinfo][%apgi_7]) (Opcode 7).

!item [Group:]
Window-dialogs

!item [See also:]
(!link [Binding] [Bindings for wdlg_create]) ~ wdlg_open ~ wdlg_close

(!ende_liste)



!begin_node Bindings for wdlg_create
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
DIALOG *wdlg_create ( HNDL_OBJ handle_exit, OBJECT *tree, void *user_data,
                      int16_t code, void *data, int16_t flags );

!item [Binding:]
!begin_verbatim
DIALOG *wdlg_create ( HNDL_OBJ handle_exit, OBJECT *tree,
                      void *user_data, int16_t code,
                      void *data, int16_t flags )
{
   addr_in[0] = handle_exit;
   addr_in[1] = tree;
   addr_in[2] = user_data;
   addr_in[3] = data;

   int_in[0] = code
   int_in[1] = flags;

   crys_if (160);

   return ( addr_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control    !! control[0]  !! 160   # Function opcode
control+2  !! control[1]  !! 2     # Entry in int_in
control+4  !! control[2]  !! 0     # Entry in int_out
control+6  !! control[3]  !! 4     # Entry in addr_in
control+8  !! control[4]  !! 1     # Entry in addr_out
addr_in    !! addr_in[0]  !! handle_exit
addr_in+4  !! addr_in[1]  !! tree
addr_in+8  !! addr_in[2]  !! user_data
addr_in+12 !! addr_in[3]  !! data
int_in     !! int_in[0]   !! code
int_in+2   !! int_in[1]   !! flags
addr_out   !! addr_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wdlg_create

(!begin_liste) [Beschreibung]

!item [Name:]
ØWindowDialog CreateÆ - Fensterdialog erstellen.

!item [AES-Nummer:]
160

!item [Deklaration:]
DIALOG *wdlg_create ( HNDL_OBJ handle_exit, OBJECT *tree, void *user_data,
                      int16_t code, void *data, int16_t flags );

!item [Beschreibung:]
Die Funktion fordert Speicherplatz fÅr eine Dialogstruktur an, und
initialisiert diese. Es gilt:

!begin_xlist !short [handle_exit]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle_exit]
Zeiger auf eine Service-Funktion
!item [tree]
Zeiger auf den Objektbaum
!item [user_data]
Zeiger auf Benutzerinformationen
!item [code]
wird in handle_exit Åber die Komponente clicks Åbergeben
!item [data]
wird in handle_exit Åber die Komponente data Åbergeben
!item [flags]
verschiedene Flags
(!nl)
1 = Hintergrundbedienung zulassen
!end_xlist

!item [Ergebnis:]
Die Funktion liefert einen Zeiger auf die erstellte Dialogstruktur zurÅck.

!item [VerfÅgbar:]
Das Vorhandensein dieser Funktion kann per (!link [appl_getinfo][%apgi_7]) (Opcode 7)
festgestellt werden.

!item [Gruppe:]
Fensterdialoge

!item [Querverweis:]
(!link [Binding] [Bindings fÅr wdlg_create]) ~  wdlg_open ~  wdlg_close

(!ende_liste)



!begin_node Bindings fÅr wdlg_create
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
DIALOG *wdlg_create ( HNDL_OBJ handle_exit, OBJECT *tree, void *user_data,
                      int16_t code, void *data, int16_t flags );

!item [Umsetzung:]
!begin_verbatim
DIALOG *wdlg_create ( HNDL_OBJ handle_exit, OBJECT *tree,
                      void *user_data, int16_t code,
                      void *data, int16_t flags )
{
   addr_in[0] = handle_exit;
   addr_in[1] = tree;
   addr_in[2] = user_data;
   addr_in[3] = data;

   int_in[0] = code
   int_in[1] = flags;

   crys_if (160);

   return ( addr_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control    !! control[0]  !! 160   # Opcode der Funktion
control+2  !! control[1]  !! 2     # EintrÑge in int_in
control+4  !! control[2]  !! 0     # EintrÑge in int_out
control+6  !! control[3]  !! 4     # EintrÑge in addr_in
control+8  !! control[4]  !! 1     # EintrÑge in addr_out
addr_in    !! addr_in[0]  !! handle_exit
addr_in+4  !! addr_in[1]  !! tree
addr_in+8  !! addr_in[2]  !! user_data
addr_in+12 !! addr_in[3]  !! data
int_in     !! int_in[0]   !! code
int_in+2   !! int_in[1]   !! flags
addr_out   !! addr_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
