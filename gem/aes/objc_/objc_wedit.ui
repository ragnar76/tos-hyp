!iflang [english]

!begin_node objc_wedit

(!begin_liste) [Availability]

!item [Name:]
ØObject window editÆ - Edit text in an object in a window.

!item [Opcode:]
65

!item [Syntax:]
int16_t objc_wedit ( OBJECT *ob_edtree, int16_t ob_edobject, int16_t ob_edchar,
                  int16_t *ob_edidx, int16_t ob_edkind, int16_t whandle );

!item [Description:]
The call objc_wedit permits manual text input into objects of the type G_FTEXT
or G_FBOXTEXT in a window. The following apply:

!begin_xlist !short [ob_edobject]
!item [Parameter]
Meaning
!item [~]
~
!item [ob_edtree]
Address of the relevant object tree
!item [ob_edobject]
Index of the object to be edited
!item [ob_edchar]
Character that was input ((!link [scancode][The scancode]) in the high and
ASCII-code in the low byte)
!item [ob_edidx]
Position of character in the string
!item [ob_edkind]
Function selection, as follows:
!begin_xlist !short [103 =]
!item [0]
= Reserved
!item [1]
= Calculate formatted string, and switch on cursor
!item [2]
= Process character and then display string anew
!item [3]
= Switch off cursor
!item [103]
= As mode 3, but the cursor is drawn in XOR mode
!end_xlist
!item [whandle]
Kennung des Fensters
!end_xlist

(!B)Note:(!b) The function corresponds in principle to objc_edit with the
difference that here the rectangle list of a window is respected.

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
The function is available in MagiC as of Version 5.10.

!item [Group:]
Object library

!item [See also:]
(!link [Binding] [Bindings for objc_wedit]) ~ objc_edit ~ OBJECT ~ TEDINFO

(!ende_liste)



!begin_node Bindings for objc_wedit
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t objc_wedit ( OBJECT *ob_edtree, int16_t ob_edobject, int16_t ob_edchar,
                  int16_t *ob_edidx, int16_t ob_edkind, int16_t whandle );

!item [Binding:]
!begin_verbatim
int16_t objc_wedit (OBJECT *ob_edtree, int16_t ob_edobject,
                    int16_t ob_edchar, int16_t *ob_edidx,
                    int16_t ob_edkind, int16_t whandle)
{
   int_in[0] = ob_edobject;
   int_in[1] = ob_edchar;
   int_in[2] = *ob_edidx;
   int_in[3] = ob_edkind; 
   int_in[4] = whandle;

   addr_in[0] = ob_edtree;

   crys_if (65);

   *ob_edidx = int_out[1];
   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 65    # Function opcode
control+2 !! control[1] !! 5     # Entry in int_in
control+4 !! control[2] !! 2     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! ob_edobject
int_in+2  !! int_in[1]  !! ob_edchar
int_in+4  !! int_in[2]  !! ob_edidx
int_in+6  !! int_in[3]  !! ob_edkind
int_in+8  !! int_in[4]  !! whandle
addr_in   !! addr_in[0] !! ob_edtree
int_out   !! int_out[0] !! Return value
int_out+2 !! int_out[1] !! ob_edidx
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node objc_wedit

(!begin_liste) [Beschreibung]

!item [Name:]
ØObject window editÆ - editiert einen Text in einem Objekt.

!item [AES-Nummer:]
65

!item [Deklaration:]
int16_t objc_wedit ( OBJECT *ob_edtree, int16_t ob_edobject, int16_t ob_edchar,
                  int16_t *ob_edidx, int16_t ob_edkind, int16_t whandle );

!item [Beschreibung:]
Die Funktion ermîglicht Texteingaben in Objekte des Typs G_FTEXT oder
G_FBOXTEXT. Es gilt:

!begin_xlist !short [ob_edobject]
!item [Parameter]
Bedeutung
!item [~]
~
!item [ob_edtree]
Adresse des Objektbaumes
!item [ob_edobject]
Nummer des zu editierenden Objektes
!item [ob_edchar]
eingegebenes Zeichen
!item [ob_edidx]
Position des Zeichens im String
!item [ob_edkind]
Funktionsauswahl, wie folgt:
!begin_xlist !short [103 =]
!item [0]
= reserviert
!item [1]
= formatierten String berechnen, und Cursor einschalten
!item [2]
= Zeichen verarbeiten und String anschlieûend neu anzeigen
!item [3]
= Cursor ausschalten
!item [103]
= Analog Modus-3, jedoch wird der Cursor im XOR-Modus gezeichnet.
!end_xlist
!item [whandle]
Kennung des Fensters
!end_xlist

(!B)Hinweis:(!b) Die Funktion entspricht im Prinzip objc_edit mit dem
Unterschied, dass hier die Rechteckliste eines Fensters beachtet wird.

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [VerfÅgbar:]
Die Funktion steht in MagiC ab Version 5.10 zur VerfÅgung.

!item [Gruppe:]
(!link [Objekte][Objektfunktionen])

!item [Querverweise:]
(!link [Binding] [Bindings fÅr objc_wedit]) ~ objc_edit ~ OBJECT ~ TEDINFO

(!ende_liste)



!begin_node Bindings fÅr objc_wedit
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t objc_wedit ( OBJECT *ob_edtree, int16_t ob_edobject, int16_t ob_edchar,
                  int16_t *ob_edidx, int16_t ob_edkind, int16_t whandle );

!item [Umsetzung:]
!begin_verbatim
int16_t objc_wedit (OBJECT *ob_edtree, int16_t ob_edobject,
                    int16_t ob_edchar, int16_t *ob_edidx,
                    int16_t ob_edkind, int16_t whandle)
{
   int_in[0] = ob_edobject;
   int_in[1] = ob_edchar;
   int_in[2] = *ob_edidx;
   int_in[3] = ob_edkind; 
   int_in[4] = whandle;

   addr_in[0] = ob_edtree;

   crys_if (65);

   *ob_edidx = int_out[1];
   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 65    # Opcode der Funktion
control+2 !! control[1] !! 5     # EintrÑge in int_in
control+4 !! control[2] !! 2     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! ob_edobject
int_in+2  !! int_in[1]  !! ob_edchar
int_in+4  !! int_in[2]  !! ob_edidx
int_in+6  !! int_in[3]  !! ob_edkind
int_in+8  !! int_in[4]  !! whandle
addr_in   !! addr_in[0] !! ob_edtree
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! ob_edidx
!end_table

(!ende_liste)
!end_node
!end_node

!endif
