!iflang [english]

!begin_node objc_order

(!begin_liste) [Availability]

!item [Name:]
ØObject orderÆ - Alter order of object in object tree.

!item [Opcode:]
45

!item [Syntax:]
int16_t objc_order ( OBJECT *ob_ortree, int16_t ob_orobject, int16_t ob_ornewpos );

!item [Description:]
The call objc_order alters the position of an object relative to other child
objects of the same parent within a sub-tree. The following apply:

!begin_xlist !short [ob_ornewpos]
!item [Parameter]
Meaning
!item [~]
~
!item [ob_ortree]
Address of the object tree
!item [ob_orobject]
Index of the relevant object
!item [ob_ornewpos]
New position in tree, namely:
!begin_table [r l l]
-1 !! = !! At the end (last child)
0 !! = !! At the start (first child)
1 !! = !! In the second position (2nd child)
2 !! = !! In the third position (etc.)
!end_table
!end_xlist

(!B)Note:(!b) This call does not move the structure elements in memory, but
updates the OBJECT tree's (!I)ob_head, ob_tail(!i) and (!I)ob_next(!i) fields,
thus 'moving' the OBJECT in the tree hierarchy.

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Object library

!item [See also:]
(!link [Binding] [Bindings for objc_order]) ~ OBJECT

(!ende_liste)



!begin_node Bindings for objc_order
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t objc_order ( OBJECT *ob_ortree, int16_t ob_orobject, int16_t ob_ornewpos );

!item [Binding:]
!begin_verbatim
int16_t objc_order (OBJECT *ob_ortree, int16_t ob_orobject,
                    int16_t ob_ornewpos)
{
   int_in[0]  = ob_orobject;
   int_in[1]  = ob_ornewpos;
   addr_in[0] = ob_ortree;

   return ( crys_if(45) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 45    # Function opcode
control+2 !! control[1] !! 2     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! ob_orobject
int_in+2  !! int_in[1]  !! ob_ornewpos
addr_in   !! addr_in[0] !! ob_ortree
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node objc_order

(!begin_liste) [Beschreibung]

!item [Name:]
ØObject OrderÆ - ordnet ein Objekt innerhalb eines Objektbaumes neu an.

!item [AES-Nummer:]
45

!item [Deklaration:]
int16_t objc_order ( OBJECT *ob_ortree, int16_t ob_orobject, int16_t ob_ornewpos );

!item [Beschreibung:]
Die Funktion verÑndert die Position eines Objektes innerhalb eines
Unterbaumes. Es gilt:

!begin_xlist !short [ob_ornewpos]
!item [Parameter]
Bedeutung
!item [~]
~
!item [ob_ortree]
Adresse des Objektbaumes
!item [ob_orobject]
Nummer des betreffenden Objektes
!item [ob_ornewpos]
neue Position im Baum, und zwar:
!begin_table [r l l]
-1 !! = !! an das Ende
0 !! = !! an den Anfang
1 !! = !! an die zweite Stelle
2 !! = !! an die dritte Stelle (usw.)
!end_table
!end_xlist

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [VerfÅgbar:]
All (!nolink [AES]) versions.

!item [Gruppe:]
(!link [Objekte][Objektfunktionen])

!item [Querverweise:]
(!link [Binding] [Bindings fÅr objc_order]) ~ OBJECT

(!ende_liste)



!begin_node Bindings fÅr objc_order
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t objc_order ( OBJECT *ob_ortree, int16_t ob_orobject, int16_t ob_ornewpos );

!item [Umsetzung:]
!begin_verbatim
int16_t objc_order (OBJECT *ob_ortree, int16_t ob_orobject,
                    int16_t ob_ornewpos)
{
   int_in[0]  = ob_orobject;
   int_in[1]  = ob_ornewpos;
   addr_in[0] = ob_ortree;

   return ( crys_if(45) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 45    # Opcode der Funktion
control+2 !! control[1] !! 2     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! ob_orobject
int_in+2  !! int_in[1]  !! ob_ornewpos
addr_in   !! addr_in[0] !! ob_ortree
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
