!iflang [english]

!begin_node PARMBLK

!begin_verbatim
typedef struct
{
   OBJECT   *pb_tree;        /* Pointer to the object tree         */
   int16_t  pb_obj;          /* Index of the object                */
   int16_t  pb_prevstate;    /* Previous object status             */
   int16_t  pb_currstate;    /* New object status                  */
   int16_t  pb_x;            /* X-position of the object           */
   int16_t  pb_y;            /* Y-position of the object           */
   int16_t  pb_w;            /* Width of the object                */
   int16_t  pb_h;            /* Height of the object               */
   int16_t  pb_xc;           /* X-position of the clipping region  */
   int16_t  pb_yc;           /* Y-position of the clipping region  */
   int16_t  pb_wc;           /* Width of the clipping region       */
   int16_t  pb_hc;           /* Height of the clipping region      */
   int32_t  pb_parm;         /* Parameter of USERBLK structure     */
} PARMBLK;
!end_verbatim

(!B)Note:(!b) The object only needs to be redrawn if the old and new states
are identical; otherwise an 'update' of the object tree suffices.
Furthermore, the following points should be respected:

!begin_itemize
!item A private function must return to the (!nolink [AES]) in data register d0
     which aspects of the object status still have to be updated.
     With this it is not absolutely necessary to program out the code
     for inverting the object in a private output function. Generally
     one would want to process some bits of the object status oneself,
     and leave others to the (!nolink [AES]).
!item The function receives the PARMBLK pointer on the stack, and hence
     must be declared in Pure-C as 'cdecl'.
!item A complete redraw of the object is required only if the compo!-
     nents (!I)pb_prevstate(!i) and (!I)pb_currstate(!i) are identical; otherwise
     only the obects status has changed (for example by being clicked
     on).
!item A private function is executed de facto as a sub-program of the
     (!nolink [AES]), hence one should take care with regard to stack usage.
     Furthermore, one can of course make (!I)no(!i) further (!nolink [AES]) calls, since
     the (!nolink [AES]) is (!I)not(!i) re-entrant. On the other hand, calls of the (!nolink [VDI])
     input functions are permitted here.
!item The component (!I)pb_parm(!i) serves to pass to one's private function
     further information (such as a pointer to a string, perhaps).
!item One should not stray too far from the original appearance of (!nolink [GEM]).
     Rounded rectangles or italic texts certainly do not match the
     normal appearance of a (!nolink [GEM]) application.
!end_itemize

See also: About the AES ~ GEM ~ USERBLK
!end_node

!else

!begin_node PARMBLK

!begin_verbatim
typedef struct
{
   OBJECT   *pb_tree;        /* Zeiger auf den Objektbaum        */
   int16_t  pb_obj;          /* Nummer des Objekts               */
   int16_t  pb_prevstate;    /* vorheriger Objektstatus          */
   int16_t  pb_currstate;    /* neuer Objektstatus               */
   int16_t  pb_x;            /* x-Position des Objektes          */
   int16_t  pb_y;            /* y-Position des Objektes          */
   int16_t  pb_w;            /* Breite des Objektes              */
   int16_t  pb_h;            /* Hîhe des Objektes                */
   int16_t  pb_xc;           /* x-Position des Clipping-Bereichs */
   int16_t  pb_yc;           /* y-Position des Clipping-Bereichs */
   int16_t  pb_wc;           /* Breite des Clipping-Bereichs     */
   int16_t  pb_hc;           /* Hîhe des Clipping-Bereichs       */
   int32_t  pb_parm;         /* Parameter der USERBLK-Struktur   */
} PARMBLK;
!end_verbatim

(!B)Hinweis:(!b) Das Objekt muû nur neu gezeichnet werden, wenn alter und
neuer Status identisch sind; anderenfalls reicht ein 'Update' des
Objektbaums aus. Ferner sollten folgende Punkte beachtet werden:

!begin_itemize
!item die eigene Funktion muû im Datenregister d0 dem (!nolink [AES]) zurÅckliefern,
      welche Aspekte des Objektstatus noch aktualisiert werden mÅssen. Damit
      ist es nicht unbedingt nîtig, in der eigenen Ausgabefunktion den Code
      zum invertieren des Objektes auszuprogrammieren. Im allgemeinen wird
      man einige Bits des Objektstatus selbst bearbeiten wollen, und andere
      dem (!nolink [AES]) Åberlassen.
!item die Funktion erhÑlt den PARMBLK-Zeiger auf dem Stack, und muû daher in
      Pure-C als 'cdecl' deklariert werden.
!item ein vollstÑndiges Neuzeichnen des Objektes ist nur dann nîtig, wenn
      die Komponenten (!I)pb_prevstate(!i) und (!I)pb_currstate(!i) gleich
      sind; anderenfalls hat sich nur der Objektstatus geÑndert (zum
      Beispiel durch Anklicken).
!item die eigene Funktion wird de facto als Unterprogramm der (!nolink [AES])
      ausgefÅhrt. Daher sollte man im Hinblick auf die Stackbenutzung
      vorsichtig sein. Auûerdem darf man natÅrlich (!I)keine(!i) weiteren
      (!nolink [AES])-Aufrufe machen, da das (!nolink [AES]) (!I)nicht(!i) re-entrant ist.
      Aufrufe
      der VDI-Eingabefunktionen sind hingegen an dieser Stelle erlaubt.
!item die Komponente (!I)pb_parm(!i) dient dazu, der eigenen Funktion
      weitere Informationen (wie etwa einen Zeiger auf einen String) mit auf
      den Weg zu geben.
!item man sollte sich nie zu weit von der ursprÅnglichen Optik von (!nolink [GEM])
      entfernen. Abgerundete Rechtecke oder kursive Texte passen sicherlich
      nicht in das normale Erscheinungsbild einer (!nolink [GEM])-Applikation.
!end_itemize

Querverweis: AES ~ GEM ~ USERBLK
!end_node

!endif
