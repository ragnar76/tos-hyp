!iflang [english]

!begin_node LBOX_ITEM

!begin_verbatim
typedef struct _lbox_item
{
   struct _lbox_item *next;  /* Pointer to the next entry in the list    */
   int16_t  selected;        /* Specifies whether the object is selected */
   int16_t  data1;           /* Data for the program...                  */
   void     *data2;
   void     *data3;
} LBOX_ITEM;
!end_verbatim

However the structure can well look like the following example with
appropriate casting during the call:

!begin_verbatim
typedef struct
{
   void     *next;
   int16_t   selected;

   ... From here on to suit the application ...
} LB_EXAMPLE;
!end_verbatim

One only has to ensure that as the first element a pointer to the
successor, and as the second element a WORD specifying whether the
corresponding entry is selected are present.

See also: (!nl)
lbox_create ~ lbox_free_list ~ lbox_get_idx ~ lbox_get_item ~
lbox_get_items
!end_node

!else

!begin_node LBOX_ITEM

!begin_verbatim
typedef struct _lbox_item
{
   struct _lbox_item *next;  /* Zeiger auf den nÑchsten Eintrag */
                             /* in der Scroll-Liste             */
   int16_t  selected;        /* Objekt selektiert?              */
   int16_t  data1;           /* Daten fÅr das Programm          */
   void     *data2;
   void     *data3;
} LBOX_ITEM;
!end_verbatim

(!B)Hinweis:(!b) Die Struktur kann aber, wenn bei den Aufrufen entsprechend
gecastet wird, durchaus wie das folgende Beispiel aussehen:

!begin_verbatim
typedef struct
{
   void     *next;
   int16_t   selected;

   ... ab hier nach Belieben der Applikation...
} LB_EXAMPLE;
!end_verbatim

Es ist lediglich darauf zu achten, daû als erstes Element ein Zeiger auf
den Nachfolger, und als zweites Element ein Wort das angibt, ob der
entsprechende Eintrag selektiert ist, vorhanden ist.

Querverweis: (!nl)
lbox_create ~ lbox_free_list ~ lbox_get_idx ~ lbox_get_item ~
lbox_get_items
!end_node

!endif
