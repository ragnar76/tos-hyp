!iflang [english]

!begin_node rsrc_rcfix

(!begin_liste) [Availability]

!item [Name:]
ØResource coordinate fixÆ - Fix up coordinates and pointers in memory.

!item [Opcode:]
115

!item [Syntax:]
int16_t rsrc_rcfix ( RSHDR *rc_header );

!item [Description:]
The function rsrc_rcfix, present in MagiC and MultiTOS, fixes up resource data
already loaded into memory by the application. During this the coordinates are
converted from character- to pixel-coordinates.

If an application has already loaded an RSC file before the function is called,
then it must be released with rsrc_free before the rsrc_rcfix call is made. The
same applies at the termination of the application.

The advantage of this function consists in the ability of incorporating the
resource file of the program into the program code itself. It then suffices to
just call rsrc_rcfix, and loading with rsrc_load can then be dispensed with. The
following applies:

!begin_ilist !short [rc_header:]
!item [rc_header:]
Address of the RSC header in memory; the RSC data must lie after this
!end_ilist

!item [(!nolink [Return]) value:]
This will be 0 if unsuccessful, else non-zero.

!item [Availability:]
Available only in MagiC and AES versions 4.0 and greater. The
presence of this call should also be checked for using
(!link [appl_getinfo][%apgi_4]) (Opcode 4).

!item [Group:]
Resource library

!item [See also:]
(!link [Binding] [Bindings for rsrc_rcfix]) ~ rsrc_load ~ rsrc_obfix

(!ende_liste)



!begin_node Bindings for rsrc_rcfix
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t rsrc_rcfix ( RSHDR *rc_header );

!item [Binding:]
!begin_verbatim
int16_t rsrc_rcfix ( RSHDR *rc_header )
{
   addr_in[0] = rc_header;
   return ( crys_if(115) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 115   # Function opcode
control+2 !! control[1] !! 0     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
addr_in   !! addr_in[0] !! rc_header
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node rsrc_rcfix

(!begin_liste) [Beschreibung]

!item [Name:]
ØResource Object FixÆ - wandelt Zeichenkoordinaten in Pixelkoordinaten

!item [AES-Nummer:]
115

!item [Deklaration:]
int16_t rsrc_rcfix ( RSHDR *rc_header );

!item [Beschreibung:]
Diese in MagiC und MultiTOS vorhandene Funktion paût von der Applikation
bereits in den Speicher geladene Resourcedaten an. Dabei werden die
Koordinaten von Zeichen- in Pixelkoordinaten gewandelt.

Falls die Applikation vor dem Aufruf dieser Funktion bereits eine RSC-Datei
geladen hat, so muû diese vorher mit rsrc_free freigegeben werden. Das
gleiche gilt beim Beenden der Applikation.

Der Vorteil dieser Funktion besteht darin, daû die Resource-Datei des
Programms in den Programmcode eingebunden werden kann. Es reicht dann aus,
einfach rsrc_rcfix aufzurufen, und ein Laden via rsrc_load kann entfallen.

!begin_ilist !short [rc_header:]
!item [rc_header:]
Adresse des RSC-Headers im Speicher; hinter diesem mÅssen die RSC-Daten
liegen.
!end_ilist

!item [Ergebnis:]
z.Zt. unbekannt.

!item [VerfÅgbar:]
Nur verfÅgbar in MagiC und AES Versions 4.0 und grîûer.
Das Vorhandensein dieser Funktion kann per (!link [appl_getinfo][%apgi_4]) (Opcode 4)
festgestellt werden.

!item [Gruppe:]
(!link [Resourceorganisation][Resourcefunktionen])

!item [Querverweis:]
(!link [Binding] [Bindings fÅr rsrc_rcfix]) ~ rsrc_load ~ rsrc_obfix

(!ende_liste)



!begin_node Bindings fÅr rsrc_rcfix
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t rsrc_rcfix ( RSHDR *rc_header );

!item [Umsetzung:]
!begin_verbatim
int16_t rsrc_rcfix ( RSHDR *rc_header )
{
   addr_in[0] = rc_header;
   return ( crys_if(115) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 115   # Opcode der Funktion
control+2 !! control[1] !! 0     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
addr_in   !! addr_in[0] !! rc_header
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
