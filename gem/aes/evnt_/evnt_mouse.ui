!iflang [english]

!begin_node evnt_mouse
(!begin_liste) [Availability]
!item [Name:]
ØEvent mouseÆ - Wait for the mouse pointer to enter or leave a specified area
of the screen.

!item [Opcode:]
22

!item [Syntax:]
int16_t evnt_mouse ( int16_t ev_moflags, int16_t ev_mox, int16_t ev_moy,
                  int16_t ev_mowidth, int16_t ev_moheight,
                  int16_t *ev_momx, int16_t *ev_momy,
                  int16_t *ev_mobutton, int16_t *ev_mokstate );

!item [Description:]
The call evnt_mouse waits until the mouse pointer enters or leaves a specified
area of the screen. The following apply:
!begin_xlist !short [ev_moheight]               
!item [Parameter]
Meaning
!item [~]
~
!item [ev_moflags]
!begin_table [l l l]
0 !! = !! Wait for mouse to enter rectangle
1 !! = !! Wait for mouse to leave rectangle
!end_table
!item [ev_mox,]
X-coordinate, (!U)and(!u)
!item [ev_moy]
Y-coordinate of top left of the rectangle to be monitored
!item [ev_mowidth,]
Width, (!U)and(!u)
!item [ev_moheight]
Height of the rectangle to be monitored
!item [ev_momx,]
X-coordinate, (!U)and(!u)
!item [ev_momy]
Y-coordinate of the mouse pointer when entering or leaving the rectangle
!item [ev_mobutton]
Status of the mouse buttons (bit 0 = left button, bit 1 = right button)
!item [ev_mokstate]
Status of the 'special' keys when the event occurs. The following apply:
!begin_table
0x001 !! = !! Right [Shift]
0x002 !! = !! Left [Shift]
0x004 !! = !! [Control]
0x008 !! = !! [Alternate]
!end_table
!end_xlist
!item [(!nolink [Return]) value:]
This is always the value 1.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Event library

!item [See also:]
(!link [Binding] [Bindings for evnt_mouse]) ~  Messages
(!ende_liste)


!begin_node Bindings for evnt_mouse
!ignore_index

(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t evnt_mouse ( int16_t ev_moflags, int16_t ev_mox, int16_t ev_moy,
                  int16_t ev_mowidth, int16_t ev_moheight,
                  int16_t *ev_momx, int16_t *ev_momy,
                  int16_t *ev_mobutton, int16_t *ev_mokstate );
!item [Binding:]
!begin_verbatim
int16_t evnt_mouse (int16_t ev_moflags, int16_t ev_mox,
                    int16_t ev_moy, int16_t ev_mowidth,
                    int16_t ev_moheight, int16_t *ev_momx,
                    int16_t *ev_momy, int16_t *ev_mobutton,
                    int16_t *ev_mokstate)
{
   int_in[0] = ev_moflags;
   int_in[1] = ev_mox;
   int_in[2] = ev_moy;
   int_in[3] = ev_mowidth;
   int_in[4] = ev_moheight; 

   crys_if (22);

   *ev_momx     = int_out[1];
   *ev_momy     = int_out[2];
   *ev_mobutton = int_out[3];
   *ev_mokstate = int_out[4];

   return (int_out[0]);
} 
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control !! control[0] !! 22    # Function opcode
control+2 !! control[1] !! 5     # Entry in int_in
control+4 !! control[2] !! 5     # Entry in int_out
control+6 !! control[3] !! 0     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in !! int_in[0] !! ev_moflags
int_in+2 !! int_in[1] !! ev_mox
int_in+4 !! int_in[2] !! ev_moy
int_in+6 !! int_in[3] !! ev_mowidth
int_in+8 !! int_in[4] !! ev_moheight
int_out !! int_out[0] !! Return value
int_out+2 !! int_out[1] !! ev_momx
int_out+4 !! int_out[2] !! ev_momy
int_out+6 !! int_out[3] !! ev_mobutton
int_out+8 !! int_out[4] !! ev_mokstate
!end_table
(!ende_liste)
!end_node
!end_node

!else

!begin_node evnt_mouse
(!begin_liste) [Beschreibung]
!item [Name:]
ØEvent MouseÆ - wartet darauf, daû der Mauszeiger in einen Bereich hinein-
oder hinausgeschoben wird.
!item [AES-Nummer:]
22
!item [Deklaration:]
int16_t evnt_mouse ( int16_t ev_moflags, int16_t ev_mox, int16_t ev_moy,
                  int16_t ev_mowidth, int16_t ev_moheight,
                  int16_t *ev_momx, int16_t *ev_momy,
                  int16_t *ev_mobutton, int16_t *ev_mokstate );

!item [Beschreibung:]
Die Funktion wartet darauf, bis der Mauszeiger einen bestimmten Teil des
Bildschirms betritt oder verlÑût.
!begin_xlist !short [ev_moheight]               
!item [Parameter]
Bedeutung
!item [~]
~
!item [ev_moflags]
!begin_table [l l l]
0 !! = !! Ereignis beim Betreten
1 !! = !! Ereignis beim Verlassen
!end_table
!item [ev_mox,]
x-Koordinate
!item [ev_moy]
y-Koordinate des zu Åberwachenden Rechtecks
!item [ev_mowidth,]
Breite und
!item [ev_moheight]
Hîhe des zu Åberwachenden Rechtecks
!item [ev_momx,]
x-Koordinate
!item [ev_momy]
y-Koordinate des Mauszeigers beim Betreten bzw. Verlassen des Rechtecks
!item [ev_mobutton]
der Zustand der Mausknîpfe (Bit-0 = linker Knopf, Bit-1 = rechter Knopf)
!item [ev_mokstate]
den Zustand der Sondertasten bei Auftreten des Ereignisses. Es gilt:
!begin_table
0x0001 !! = !! Shift-rechts
0x0002 !! = !! Shift-links
0x0004 !! = !! Control
0x0008 !! = !! Alternate
!end_table
!end_xlist
!item [Ergebnis:]
Als Ergebnis wird immer eine 1 zurÅckgeliefert.

!item [VerfÅgbar:]
All (!nolink [AES]) versions.

!item [Gruppe:]
Ereignisverwaltung
!item [Querverweis:]
(!link [Binding] [Bindings fÅr evnt_mouse]) ~  Nachrichten
(!ende_liste)


!begin_node Bindings fÅr evnt_mouse
!ignore_index

(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t evnt_mouse ( int16_t ev_moflags, int16_t ev_mox, int16_t ev_moy,
                  int16_t ev_mowidth, int16_t ev_moheight,
                  int16_t *ev_momx, int16_t *ev_momy,
                  int16_t *ev_mobutton, int16_t *ev_mokstate );
!item [Umsetzung:]
!begin_verbatim
int16_t evnt_mouse (int16_t ev_moflags, int16_t ev_mox,
                    int16_t ev_moy, int16_t ev_mowidth,
                    int16_t ev_moheight, int16_t *ev_momx,
                    int16_t *ev_momy, int16_t *ev_mobutton,
                    int16_t *ev_mokstate)
{
   int_in[0] = ev_moflags;
   int_in[1] = ev_mox;
   int_in[2] = ev_moy;
   int_in[3] = ev_mowidth;
   int_in[4] = ev_moheight; 

   crys_if (22);

   *ev_momx     = int_out[1];
   *ev_momy     = int_out[2];
   *ev_mobutton = int_out[3];
   *ev_mokstate = int_out[4];

   return (int_out[0]);
} 
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control !! control[0] !! 22    # Opcode der Funktion
control+2 !! control[1] !! 5     # EintrÑge in int_in
control+4 !! control[2] !! 5     # EintrÑge in int_out
control+6 !! control[3] !! 0     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in !! int_in[0] !! ev_moflags
int_in+2 !! int_in[1] !! ev_mox
int_in+4 !! int_in[2] !! ev_moy
int_in+6 !! int_in[3] !! ev_mowidth
int_in+8 !! int_in[4] !! ev_moheight
int_out !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! ev_momx
int_out+4 !! int_out[2] !! ev_momy
int_out+6 !! int_out[3] !! ev_mobutton
int_out+8 !! int_out[4] !! ev_mokstate
!end_table
(!ende_liste)
!end_node
!end_node

!endif
