!iflang [english]

!begin_node edit_scroll
(!begin_liste) [Availability]
!item [Name:]
ØEdit Object ScrollÆ - Alter settings: Scroll positions
!item [Opcode:]
217 (sub-opcode 9)

!item [Syntax:]
int16_t edit_scroll ( OBJECT *tree, int16_t obj, int16_t whdl, int32_t yscroll,
                   int16_t xscroll );

!item [Description:]
The call edit_scroll is used for altering the scroll position in an editable
object. The following apply:

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [tree]
RSC-tree of object
!item [obj]
Object index
!item [whdl]
Window handle or -1
!item [yscroll]
Vertical scroll offset in lines
!item [xscroll]
Horizontal scroll offset in pixels
!end_xlist

With this one scrolls horizontally and vertically absolutely. This call is
required when a scroll bar or arrow has been clicked on. The window handle is
required so that the rectangle list is taken into consideration during scrolling.

An error-code will be returned if the number of lines has been exceeded.

!item [(!nolink [Return]) value:]
1 (OK) or 0 (Error)

!item [Availability:]
As of MagiC 5.20 by means of a shared library.

!item [Group:]
Editable object functions

!item [See also:]
(!link [Binding] [Bindings for edit_scroll])
(!ende_liste)



!begin_node Bindings for edit_scroll
!ignore_index

(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t edit_scroll ( OBJECT *tree, int16_t obj, int16_t whdl, int32_t yscroll,
                   int16_t xscroll );
!item [Binding:]
!begin_verbatim
int16_t edit_scroll ( OBJECT *tree, int16_t obj, int16_t whdl,
                      int32_t yscroll, int16_t xscroll )
{
   int_in[0]    = obj;
   int_in[1]    = 9;      /* Sub-opcode for function */
   int_in[2]    = whdl;
   int_in[3..4] = yscroll;
   int_in[5]    = xscroll;

   addr_in[0] = tree;

   crys_if( 217 );

   return ( int_out [0] );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 217   # Function opcode
control+2 !! control[1] !! 6     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! obj
int_in+2  !! int_in[1]  !! 9     # Sub-opcode
int_in+4  !! int_in[2]  !! whdl
int_in+6  !! int_in[3..4]  !! yscroll
int_in+10  !! int_in[5]  !! xscroll
addr_in   !! addr_in[0] !! tree
int_out   !! int_out[0] !! Return value
!end_table
(!ende_liste)
!end_node
!end_node

!else

!begin_node edit_scroll
(!begin_liste) [Beschreibung]
!item [Name:]
ØEdit Object ScrollÆ - scroll den Inhalt eines Editobjekts.
!item [AES-Nummer:]
217 (Unterfunktion 9)
!item [Deklaration:]
int16_t edit_scroll ( OBJECT *tree, int16_t obj, int16_t whdl, int32_t yscroll,
                   int16_t xscroll );

!item [Beschreibung:]
!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [tree]
RSC-Baum des Objekts
!item [obj]
Objektnummer
!item [whdl]
Fenster-Handle oder -1
!item [yscroll]
vertik. Scroll-Offset in Zeilen
!item [xscroll]
horiz. Scroll-Offset in Pixeln
!end_xlist

Hiermit wird horizontal und vertikal absolut gescrollt. Dieser Aufruf
wird benîtigt, wenn ein Scrollbalken oder -pfeil betÑtigt wurde.
Das Fenster-Handle wird benîtigt, damit beim Scrollen die Rechteckliste
berÅcksichtigt werden kann.

Ein Fehlercode wird zurÅckgegeben, wenn die Anzahl der Zeilen
Åberschritten wurde.

!item [Ergebnis:]
Die Funktion liefert bei erfolgreicher AusfÅhrung den Wert 1 und im
Fehlerfall den Wert 0 zurÅck.

!item [VerfÅgbar:]
ab MagiC 5.20 mittels SharedLibrary

!item [Gruppe:]
Editobjekt-Funktionen
!item [Querverweis:]
(!link [Binding] [Bindings fÅr edit_scroll])
(!ende_liste)



!begin_node Bindings fÅr edit_scroll
!ignore_index

(!begin_liste) [GEM-Arrays]
!item [C:]
int16_t edit_scroll ( OBJECT *tree, int16_t obj, int16_t whdl, int32_t yscroll,
                   int16_t xscroll );
!item [Umsetzung:]
!begin_verbatim
int16_t edit_scroll ( OBJECT *tree, int16_t obj, int16_t whdl,
                      int32_t yscroll, int16_t xscroll )
{
   int_in[0]    = obj;
   int_in[1]    = 9;      /* Subcode fÅr Funktion */
   int_in[2]    = whdl;
   int_in[3..4] = yscroll;
   int_in[5]    = xscroll;

   addr_in[0] = tree;

   crys_if( 217 );

   return ( int_out [0] );
}
!end_verbatim
!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 217   # Opcode der Funktion
control+2 !! control[1] !! 6     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! obj
int_in+2  !! int_in[1]  !! 9     # Sub-Opcode
int_in+4  !! int_in[2]  !! whdl
int_in+6  !! int_in[3..4]  !! yscroll
int_in+10  !! int_in[5]  !! xscroll
addr_in   !! addr_in[0] !! tree
int_out   !! int_out[0] !! Return-Wert
!end_table
(!ende_liste)
!end_node
!end_node

!endif
