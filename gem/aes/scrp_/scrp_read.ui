!iflang [english]

!begin_node scrp_read

(!begin_liste) [Availability]

!item [Name:]
ØScrap readÆ - Obtain pathname of the clipboard.

!item [Opcode:]
80

!item [Syntax:]
int16_t scrp_read ( int8_t *sc_rpscrap );

!item [Description:]
The call scrp_read obtains the current directory which is being used for
temporary storage (the clipboard).

(!B)Note:(!b) The clipboard directory path will lie in the parameter
(!I)sc_rpscrap(!i) after the call. One must be sure that the receiving buffer
is large enough for this.

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

To quote Mike Fulton, Atari Computer: (!nl)
"The scrp_read function is defined as possibly returning an error-code of zero.
However, this function currently always returns a value of 1. Since this may
change in future versions of (!nolink [GEM]) (!nolink [AES]), applications
should handle the case of the error-code even if the programmer does not expect
to see it."

As of PC-(!nolink [GEM]) Version 2.0 however the following values are returned:
-1, if no path has been set yet; values >= 0 are to be taken as a bit-vector
that is meant to provide information about the found file types. The following
assignments apply:

!label SCRAP_CSV 
!label SCRAP_TXT 
!label SCRAP_GEM 
!label SCRAP_IMG 
!label SCRAP_DCA 
!label SCRAP_USR 
!begin_table [l l l l]
SCRAP_CSV !!  0x0001  !! = !! scrap.csv
SCRAP_TXT !!  0x0002  !! = !! scrap.txt
SCRAP_GEM !!  0x0004  !! = !! scrap.gem
SCRAP_IMG !!  0x0008  !! = !! scrap.img
SCRAP_DCA !!  0x0010  !! = !! scrap.dca
~         !!  0x0020  !! = !! scrap.dif (see Note)
SCRAP_USR !!  0x8000  !! = !! scrap.usr
!end_table

All other bits are reserved for future purposes.

(!B)Note:(!b) According to the docs for PC-(!nolink [GEM]), scrap.usr is coded
in bit 5, though the (!nolink [AES]) source text says bit 15.

The library from the book (!I)Vom AnfÑnger zum (!nolink [GEM])-Profi(!i)
allocates bit 5 to DIF files. The extension is unoffi!-cial and works only if
that library is used for the build.

!item [Availability:]
All (!nolink [AES]) versions, not present in ViewMAX.

!item [Group:]
Scrap library

!item [See also:]
(!link [Binding] [Bindings for scrp_read]) ~ scrp_write ~
(!link [Data exchange via the GEM clipboard][Data exchange via the GEM clipboard])

(!ende_liste)



!begin_node Bindings for scrp_read
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t scrp_read ( int8_t *sc_rpscrap );

!item [Binding:]
!begin_verbatim
int16_t scrp_read (int8_t *sc_rpscrap)
{
   addr_in[0] = sc_rpscrap;
   return ( crys_if(80) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 80    # Function opcode
control+2 !! control[1] !! 0     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
addr_in   !! addr_in[0] !! sc_rpscrap
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node scrp_read

(!begin_liste) [Beschreibung]

!item [Name:]
ØScrap readÆ - ermittelt den Pfadnamen des Klemmbrettes.

!item [AES-Nummer:]
80

!item [Deklaration:]
int16_t scrp_read ( int8_t *sc_rpscrap );

!item [Beschreibung:]
Die Funktion ermittelt das aktuelle Verzeichnis, welches fÅr die
Zwischenablage (Klemmbrett) benutzt wird.

(!B)Hinweis:(!b) Das Klemmbrett-Verzeichnis befindet sich nach dem Aufruf
der Funktion im Parameter (!I)sc_rpscrap(!i). Man sollte auf eine
ausreichende Grîûe dieses aufnehmenden Puffers achten.

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

Zitat Mike Fulton, Atari Computer: (!nl)
ØThe scrp_read() function is defined as possibly returning an error code
of zero. However, this function currently always returns a value of 1.
Since this may change in future versions of (!nolink [GEM]) (!nolink [AES]),
applications should handle the case of the error code even if the programmer does
not expect to see it.Æ

Ab PC-(!nolink [GEM]) Version 2.0 werden jedoch die folgenden Werte
zurÅck!-ge!-liefert: -1,
falls noch kein Pfad gesetzt ist, RÅckgabewerte >= 0 sind als Bitvektor
aufzufassen, der Åber gefundene Dateitypen informieren soll. Es gilt die
folgende Belegung:

!label SCRAP_CSV 
!label SCRAP_TXT 
!label SCRAP_GEM 
!label SCRAP_IMG 
!label SCRAP_DCA 
!label SCRAP_USR 
!begin_table [l l l l]
SCRAP_CSV !!  0x0001  !! = !! scrap.csv
SCRAP_TXT !!  0x0002  !! = !! scrap.txt
SCRAP_GEM !!  0x0004  !! = !! scrap.gem
SCRAP_IMG !!  0x0008  !! = !! scrap.img
SCRAP_DCA !!  0x0010  !! = !! scrap.dca
~         !!  0x0020  !! = !! scrap.dif (siehe Hinweis)
SCRAP_USR !!  0x8000  !! = !! scrap.usr
!end_table

Alle anderen Bits sind fÅr zukÅnftige Zwecke reserviert.

(!B)Hinweis:(!b)
Laut der Doku zu PC-(!nolink [GEM]) ist scrap.usr in Bit 5 kodiert. Der
(!nolink [AES])-Quelltext sagt aber Bit 15.
Die Library aus dem Buch "Vom AnfÑnger zum (!nolink [GEM])-Profi" belegt Bit 5
mit DIF-Dateien. Die Erweiterung ist inoffiziell und funktioniert nur wenn diese 
Library fÅr die Erstellung benutzt wird.

!item [VerfÅgbar:]
All (!nolink [AES]) versions, not present in ViewMAX.

!item [Gruppe:]
(!link [Zwischenspeicher][Klemmbrett-Funktionen])

!item [Querverweis:]
(!link [Binding] [Bindings fÅr scrp_read]) ~ scrp_write ~
(!link [Datenaustausch per Klemmbrett][Der Datenaustausch Åber das GEM-Klemmbrett])

(!ende_liste)



!begin_node Bindings fÅr scrp_read
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t scrp_read ( int8_t *sc_rpscrap );

!item [Umsetzung:]
!begin_verbatim
int16_t scrp_read (int8_t *sc_rpscrap)
{
   addr_in[0] = sc_rpscrap;
   return ( crys_if(80) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 80    # Opcode der Funktion
control+2 !! control[1] !! 0     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
addr_in   !! addr_in[0] !! sc_rpscrap
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
