!iflang [english]

!begin_node wind_calc
!label WC_BORDER
!label WC_WORK

(!begin_liste) [Availability]

!item [Name:]
ØWindow calculationÆ - Calculates the limits or the total space requirement of
a window

!item [Opcode:]
108

!item [Syntax:]
int16_t wind_calc ( int16_t wi_ctype, int16_t wi_ckind, int16_t wi_cinx, int16_t wi_ciny,
                 int16_t wi_cinw, int16_t wi_cinh, int16_t *coutx, int16_t *couty,
                 int16_t *coutw, int16_t *couth );

!item [Description:]
The call wind_calc calculates the size of the border area from the coordinates
of the working area of a specific window, or vice versa. The following apply:

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [wi_ctype]
0 = WC_BORDER calculates the coordinates of the border area from the coordinates
of the working area in the parameters (!I)wi_cinx(!i), (!I)wi_ciny(!i),
(!I)wi_cinw(!i) and (!I)wi_cinh.(!i)
(!nl)
1 = WC_WORK calculates the coordinates of the working area from the coordinates
of the border area in the parameters (!I)wi_cinx(!i), (!I)wi_ciny(!i),
(!I)wi_cinw(!i) and (!I)wi_cinh.(!i)

!item [wi_ckind]
An integer parameter that contains all
(!link [components] [The components of a window]) of the window, with a format
as
!item [wi_cinx]
X-coordinate, (!U)and(!u)
!item [wi_ciny]
Y-coordinate of top left corner,
!item [wi_cinw]
Width, (!U)and(!u)
!item [wi_cinh]
Height of the window (already known)
!item [coutx]
X-coordinate,
!item [couty]
Y-coordinate,
!item [coutw]
Width, (!U)and(!u)
!item [couth]
Height of the calculated components
!end_xlist

(!B)Note:(!b) One should never assume that the components of a window have a
given size or position, but (!I)always(!i) use this function. Even then, the
calculated height will be incorrect if the window has a toolbar attached to it;
this can be corrected by adjusting the value by the height of the toolbar (see
also below).

!label WC_WIN
(!B)WINX extension:(!b) Premise: (!link [appl_getinfo][%apgi_22360]) (opcode
22360) If one sets bit 15 in (!I)wi_ctype(!i) (e.g. by addition of the
constant WC_WIN (=$8000)) and in (!I)wi_ckind(!i) passes the ID of a window
instead of the window components, it is possible to obtain more exact
dimensions for the window, as the function can take into account the current
properties of the window (e.g. a toolbar). Additionally the function performs
an auto-correction of the structure area, which is also performed by
functions such as wind_open, wind_set(
(!link [WF_CURRXYWH][WF_CURRXYWH, wind_set])) when necessary and if supported
by the (!nolink [AES]).

!item [(!nolink [Return]) value:]
An error has arisen only if the value 0 is returned.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Window library

!item [See also:]
(!link [Binding] [Bindings for wind_calc])  ~ wind_create ~
(!link [Problems with toolbars][Problems with wind_calc in toolbar windows])

(!ende_liste)



!begin_node Bindings for wind_calc
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_calc ( int16_t wi_ctype, int16_t wi_ckind, int16_t wi_cinx, int16_t wi_ciny,
                 int16_t wi_cinw, int16_t wi_cinh, int16_t *coutx, int16_t *couty,
                 int16_t *coutw, int16_t *couth );

!item [Binding:]
!begin_verbatim
int16_t wind_calc (int16_t wi_ctype, int16_t wi_ckind,
                   int16_t wi_cinx, int16_t wi_ciny,
                   int16_t wi_cinw, int16_t wi_cinh,
                   int16_t *coutx, int16_t *couty,
                   int16_t *coutw, int16_t *couth)
{
   int_in[0]  = wi_ctype;
   int_in[1]  = wi_ckind;
   int_in[2]  = wi_cinx;
   int_in[3]  = wi_ciny;  
   int_in[4]  = wi_cinw;
   int_in[5]  = wi_cinh;

   crys_if (108); 

   *coutx = int_out[1];
   *couty = int_out[2];
   *coutw = int_out[3];
   *couth = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 108   # Function opcode
control+2 !! control[1] !! 6     # Entry in int_in
control+4 !! control[2] !! 5     # Entry in int_out
control+6 !! control[3] !! 0     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! wi_ctype
int_in+2  !! int_in[1]  !! wi_ckind
int_in+4  !! int_in[2]  !! wi_cinx
int_in+6  !! int_in[3]  !! wi_ciny
int_in+8  !! int_in[4]  !! wi_cinw
int_in+10 !! int_in[5]  !! wi_cinh
int_out   !! int_out[0] !! Return value
int_out+2 !! int_out[1] !! coutx
int_out+4 !! int_out[2] !! couty
int_out+6 !! int_out[3] !! coutw
int_out+8 !! int_out[4] !! couth
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wind_calc
!label WC_BORDER
!label WC_WORK

(!begin_liste) [Beschreibung]

!item [Name:]
ØWindow CalculationÆ - berechnet die Grenzen oder den gesamten Platzbedarf
eines Fensters.

!item [AES-Nummer:]
108

!item [Deklaration:]
int16_t wind_calc ( int16_t wi_ctype, int16_t wi_ckind, int16_t wi_cinx, int16_t wi_ciny,
                 int16_t wi_cinw, int16_t wi_cinh, int16_t *coutx, int16_t *couty,
                 int16_t *coutw, int16_t *couth );

!item [Beschreibung:]
Die Funktion berechnet fÅr ein Fenster die Grîûe des Randbereichs aus den
Koordinaten des Arbeitsbereichs oder umgekehrt. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [wi_ctype]
0 = WC_BORDER berechnet die Koordinaten des Randbereichs aus den Koordinaten
des Arbeitsbereichs in den Parametern (!I)wi_cinx(!i), (!I)wi_ciny(!i),
(!I)wi_cinw(!i) und (!I)wi_cinh(!i).
(!nl)
1 = WC_WORK berechnet die Koordinaten des Arbeitsbereichs aus den
Koordinaten des Randbereichs in den Parametern (!I)wi_cinx(!i),
(!I)wi_ciny(!i), (!I)wi_cinw(!i) und (!I)wi_cinh(!i).
!item [wi_ckind]
ein Integerparameter der alle
(!link [Komponenten] [Die Komponenten eines Fensters])
des Fenster beeinhaltet, Format wie in wind_create
!item [wi_cinx]
x-Koordinate
!item [wi_ciny]
y-Koordinate
!item [wi_cinw]
Breite
!item [wi_cinh]
Hîhe des Fensters (bereits bekannt)
!item [coutx]
x-Koordinate
!item [couty]
y-Koordinate
!item [coutw]
Breite
!item [couth]
Hîhe der berechneten Komponente
!end_xlist

(!B)Hinweis:(!b) Man sollte niemals davon ausgehen, daû die Elemente eines
Fensters eine bestimmte Grîûe oder Position besitzen, sondern (!I)immer(!i)
diese Funktion benutzen.

!label WC_WIN
(!B)WINX-Erweiterung:(!b)
Vorraussetzung: (!link [appl_getinfo][%apgi_22360]) (Opcode 22360) (!nl)
Setzt man Bit 15 in (!I)wi_ctype(!i) (z.B. durch Addition der Konstanten
WC_WIN (=$8000)) und Åbergibt in (!I)wi_ckind(!i) statt Fensterelementen
die Kennung eines Fensters, ist es mîglich die Ausmaûe des Fensters
exakter zu bestimmen, da die Funktion die aktuellen Eigenschaften
des Fenster berÅcksichtigen kann (z.B. eine Toolbar). Auûerdem
fÅhrt die Funktion eine Autokorrektur des Strukturbereichs durch,
die auch von Funktionen wie wind_open, wind_set( (!link [WF_CURRXYWH][WF_CURRXYWH, wind_set]))
vorgenommen wird, falls dies notwendig ist und vom AES unterstÅtzt wird.

!item [Ergebnis:]
Ein Fehler ist nur dann aufgetreten, wenn als Ergebnis 0 zurÅckgegeben wird.

!item [VerfÅgbar:]
All (!nolink [AES]) versions.

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr wind_calc])  ~ wind_create ~
(!link [Probleme bei Toolbars][Probleme bei wind_calc in Toolbar-Fenstern])

(!ende_liste)



!begin_node Bindings fÅr wind_calc
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_calc ( int16_t wi_ctype, int16_t wi_ckind, int16_t wi_cinx, int16_t wi_ciny,
                 int16_t wi_cinw, int16_t wi_cinh, int16_t *coutx, int16_t *couty,
                 int16_t *coutw, int16_t *couth );

!item [Umsetzung:]
!begin_verbatim
int16_t wind_calc (int16_t wi_ctype, int16_t wi_ckind,
                   int16_t wi_cinx, int16_t wi_ciny,
                   int16_t wi_cinw, int16_t wi_cinh,
                   int16_t *coutx, int16_t *couty,
                   int16_t *coutw, int16_t *couth)
{
   int_in[0]  = wi_ctype;
   int_in[1]  = wi_ckind;
   int_in[2]  = wi_cinx;
   int_in[3]  = wi_ciny;  
   int_in[4]  = wi_cinw;
   int_in[5]  = wi_cinh;

   crys_if (108); 

   *coutx = int_out[1];
   *couty = int_out[2];
   *coutw = int_out[3];
   *couth = int_out[4];

   return ( int_out[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 108   # Opcode der Funktion
control+2 !! control[1] !! 6     # EintrÑge in int_in
control+4 !! control[2] !! 5     # EintrÑge in int_out
control+6 !! control[3] !! 0     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! wi_ctype
int_in+2  !! int_in[1]  !! wi_ckind
int_in+4  !! int_in[2]  !! wi_cinx
int_in+6  !! int_in[3]  !! wi_ciny
int_in+8  !! int_in[4]  !! wi_cinw
int_in+10 !! int_in[5]  !! wi_cinh
int_out   !! int_out[0] !! Return-Wert
int_out+2 !! int_out[1] !! coutx
int_out+4 !! int_out[2] !! couty
int_out+6 !! int_out[3] !! coutw
int_out+8 !! int_out[4] !! couth
!end_table

(!ende_liste)
!end_node
!end_node

!endif
