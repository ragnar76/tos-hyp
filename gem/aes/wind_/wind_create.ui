!iflang [english]

!begin_node wind_create

(!begin_liste) [Availability]

!item [Name:]
ØWindow createÆ - Initializes a new window

!item [Opcode:]
100

!item [Syntax:]
int16_t wind_create ( int16_t wi_crkind, int16_t wi_crwx, int16_t wi_crwy,
                   int16_t wi_crww, int16_t wi_crwh );

!item [Description:]
The call wind_create attempts to initialize a new window structure with the
(!nolink [AES]) and at the same time determines its appearance and maximum
size; it also allocates the memory required for it. Note that this call does
not actually display the window on-screen -  you need to follow it with a
wind_open call for this.

(!I)wi_crwx, wi_crwy, wi_crww, wi_crwh(!i) set the maximum extent of the
window.

(!I)wi_crkind(!i) describes the
(!link [components] [The components of a window])
as a bit-vector:

!label NAME        
!label CLOSER      
!label FULLER      
!label MOVER       
!label INFO        
!label SIZER       
!label UPARROW     
!label DNARROW     
!label VSLIDE      
!label LFARROW     
!label RTARROW     
!label HSLIDE      
!label HOTCLOSEBOX 
!label MENUBAR     
!label BACKDROP    
!label ICONIFIER   
!label BORDER      
!begin_table [l|l|l]
Element !! Value !! Meaning
!hline
NAME        !! 0x0001 !! (!nolink [Title])-bar
CLOSER      !! 0x0002 !! Close-box
FULLER      !! 0x0004 !! Fuller-box
MOVER       !! 0x0008 !! Window may be moved by user
INFO        !! 0x0010 !! Info-line
SIZER       !! 0x0020 !! Sizer-box
UPARROW     !! 0x0040 !! Up-arrow
DNARROW     !! 0x0080 !! Down-arrow
VSLIDE      !! 0x0100 !! Vertical slider
LFARROW     !! 0x0200 !! Left arrow
RTARROW     !! 0x0400 !! Right arrow
HSLIDE      !! 0x0800 !! Horizontal slider
HOTCLOSEBOX !! 0x1000 !! Close-box with auto-repeat
MENUBAR     !! 0x1000 !! Menu bar ((!nolink [XaAES]))
BACKDROP    !! 0x2000 !! Background-box
ICONIFIER   !! 0x4000 !! Iconify-button
BORDER      !! 0x8000 !! Border sizing
!end_table

(!B)(!nolink [Notes]):(!b) HOTCLOSEBOX is only available as of
PC-(!nolink [GEM]) or MagiC Version 2.0 (in each case). Window borders that are
not needed (e.g. bottom border) will be omitted as of (!nolink [AES]) Version 4.x
or (!nolink [MagiC]) 3; this makes available a few more pixels of usable area.

MENUBAR is only available in (!nolink [XaAES]). It reserves room for a menu bar
widget in the window. The menu bar itself is attached to the window by wind_set.

Setting BORDER will make (!nolink [XaAES]) allow for window border sizing without
the SIZER widget being used.

ICONIFIER is available only as of (!nolink [AES]) Version 4.1.

The presence of newer components such as the iconify button, for instance, is
best inquired for by using (!link [appl_getinfo][%apgi_11]) (opcode 11).

!item [(!nolink [Return]) value:]
The function returns a non-negative handle if the (!nolink [AES]) still has a
free window handle available. A return value smaller than 0 (i.e. negative)
signals an error or no more free handles available.

!item [Availability:]
All (!nolink [AES]) versions.

!item [Group:]
Window library

!item [See also:]
(!link [Binding] [Bindings for wind_create]) ~ wind_delete

(!ende_liste)



!begin_node Bindings for wind_create
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_create ( int16_t wi_crkind, int16_t wi_crwx, int16_t wi_crwy,
                   int16_t wi_crww, int16_t wi_crwh );

!item [Binding:]
!begin_verbatim
int16_t wind_create (int16_t wi_crkind, int16_t wi_crwx,
                     int16_t wi_crwy, int16_t wi_crww,
                     int16_t wi_crwh)
{
   int_in[0]  = wi_crkind;
   int_in[1]  = wi_crwx;
   int_in[2]  = wi_crwy;
   int_in[3]  = wi_crww;  
   int_in[4]  = wi_crwh;

   return ( crys_if(100) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 100   # Function opcode
control+2 !! control[1] !! 5     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 0     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
int_in    !! int_in[0]  !! wi_crkind
int_in+2  !! int_in[1]  !! wi_crwx
int_in+4  !! int_in[2]  !! wi_crwy
int_in+6  !! int_in[3]  !! wi_crww
int_in+8  !! int_in[4]  !! wi_crwh
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node wind_create

(!begin_liste) [Beschreibung]

!item [Name:]
ØWindow createÆ - meldet ein neues Fenster an.

!item [AES-Nummer:]
100

!item [Deklaration:]
int16_t wind_create ( int16_t wi_crkind, int16_t wi_crwx, int16_t wi_crwy,
                   int16_t wi_crww, int16_t wi_crwh );

!item [Beschreibung:]
Die Funktion versucht beim AES ein neues Fenster anzumelden und legt dabei
gleichzeitig sein Aussehen und die maximale Grîûe fest.

wi_crwx, wi_crwy, wi_crww, wi_crwh legen die maximale Ausdehnung des
Fensters fest.

(!I)wi_crkind(!i) beschreibt die
(!link [Komponenten] [Die Komponenten eines Fensters])
als Bitvektor:

!label NAME        
!label CLOSER      
!label FULLER      
!label MOVER       
!label INFO        
!label SIZER       
!label UPARROW     
!label DNARROW     
!label VSLIDE      
!label LFARROW     
!label RTARROW     
!label HSLIDE      
!label HOTCLOSEBOX 
!label MENUBAR     
!label BACKDROP    
!label ICONIFIER   
!label BORDER      
!begin_table [l|l|l]
Komponente !! Wert !! Bedeutung
!hline
NAME        !! 0x0001 !! Titelzeile
CLOSER      !! 0x0002 !! Schlieûbox
FULLER      !! 0x0004 !! Volle-Grîûe-Box
MOVER       !! 0x0008 !! Fenster kann bewegt werden
INFO        !! 0x0010 !! Infozeile
SIZER       !! 0x0020 !! Grîûenverstellungsbox
UPARROW     !! 0x0040 !! Pfeil nach oben
DNARROW     !! 0x0080 !! Pfeil nach unten
VSLIDE      !! 0x0100 !! vertikaler Slider
LFARROW     !! 0x0200 !! Pfeil nach links
RTARROW     !! 0x0400 !! Pfeil nach rechts
HSLIDE      !! 0x0800 !! horizontaler Slider
HOTCLOSEBOX !! 0x1000 !! Close-Box mit Auto-Repeat
MENUBAR     !! 0x1000 !! Menuzeile (XaAES)
BACKDROP    !! 0x2000 !! Hintergrund-Box
ICONIFIER   !! 0x4000 !! Iconify-Button
BORDER      !! 0x8000 !! border sizing
!end_table

(!B)Hinweis:(!b) Die Hotclose-Box steht erst ab PC-GEM bzw. MagiC (jeweils)
ab Version 2.0 zur VerfÅgung. Nicht benîtigte FensterrÑnder (z.B. Rand
unten) werden ab AES-Version 4.x bzw. (!nolink [MagiC]) 3 weggelassen; dadurch stehen
einige Pixel mehr an nutzbarer FlÑche zur VerfÅgung.

MENUBAR steht nur in XaAES zur VerfÅgung. Es reserviert Platz fÅr eine Menuzeile
im Fenster. Die MenÅzeile muû mit wind_set angemeldet werden.

Setting BORDER will make XaAES allow for window border sizing without the SIZER gadget
being used.

Das Vorhandensein neuerer Komponenten wie beispielsweise dem Iconify-Button,
sollte am besten per (!link [appl_getinfo][%apgi_11]) (Opcode 11) erfragt werden.

!item [Ergebnis:]
Die Funktion liefert ein nicht negatives Handle, falls das (!nolink [AES]) noch ein
freies Windowhandle zur VerfÅgung hat. Ein RÅckgabewert kleiner Null
signalisiert einen Fehler oder keine weiteren Handles mehr.

!item [VerfÅgbar:]
All (!nolink [AES]) versions.

!item [Gruppe:]
Fensterverwaltung

!item [Querverweis:]
(!link [Binding] [Bindings fÅr wind_create])  ~ wind_delete

(!ende_liste)



!begin_node Bindings fÅr wind_create
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t wind_create ( int16_t wi_crkind, int16_t wi_crwx, int16_t wi_crwy,
                   int16_t wi_crww, int16_t wi_crwh );

!item [Umsetzung:]
!begin_verbatim
int16_t wind_create (int16_t wi_crkind, int16_t wi_crwx,
                     int16_t wi_crwy, int16_t wi_crww,
                     int16_t wi_crwh)
{
   int_in[0]  = wi_crkind;
   int_in[1]  = wi_crwx;
   int_in[2]  = wi_crwy;
   int_in[3]  = wi_crww;  
   int_in[4]  = wi_crwh;

   return ( crys_if(100) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 100   # Opcode der Funktion
control+2 !! control[1] !! 5     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 0     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
int_in    !! int_in[0]  !! wi_crkind
int_in+2  !! int_in[1]  !! wi_crwx
int_in+4  !! int_in[2]  !! wi_crwy
int_in+6  !! int_in[3]  !! wi_crww
int_in+8  !! int_in[4]  !! wi_crwh
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
