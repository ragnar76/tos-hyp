!iflang [english]

!begin_node x_form_error

(!begin_liste) [Availability]

!item [Name:]
ØXForm errorÆ - Display an error box for (!nolink [TOS]) errors (Geneva).

!item [Opcode:]
28945

!item [Syntax:]
int16_t x_form_error ( uint8_t *fmt, int16_t errnum );

!item [Description:]
The function x_form_error takes the error-code specified by (!I)errnum(!i) and
finds an appropriate error-message string. It then inserts this text into a
program-defined alert string and displays an alert.

The (!I)fmt(!i) should be in standard form_alert format, with a '%s' to indicate
the location where the error-message should be inserted. Since an alert can
contain no more than five lines of 30 characters each, and the pre!-defined
error-messages can take up to three lines, there should be no more than two
lines of text surrounding the inserted error text.

Example:
!begin_verbatim
if( x_form_error( "[1][Error!|%s][Continue|Quit]", -33 ) == 1 )
  continue...
else quit...
!end_verbatim

!item [(!nolink [Return]) value:]
This will be the index (1-3) of the selected exit button.

!item [Availability:]
The function is only available under Geneva.

!item [Group:]
Form library

!item [See also:]
(!link [Binding] [Bindings for x_form_error]) ~ form_error ~ form_xerr ~
form_err in N.AES

(!ende_liste)



!begin_node Bindings for x_form_error
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_form_error ( uint8_t *fmt, int16_t errnum );

!item [Binding:]
!begin_verbatim
int16_t x_form_error ( uint8_t *fmt, int16_t errnum )
{
   int_in[0] = errnum;

   adrin[0] = fmt;

   return ( crys_if(28945) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! (!nolink [Contents])
!hline
control   !! control[0] !! 28945 # Function opcode
control+2 !! control[1] !! 1     # Entry in int_in
control+4 !! control[2] !! 1     # Entry in int_out
control+6 !! control[3] !! 1     # Entry in addr_in
control+8 !! control[4] !! 0     # Entry in addr_out
addr_in   !! addr_in[0] !! fmt
int_in    !! int_in[0]  !! enum
int_out   !! int_out[0] !! Return value
!end_table

(!ende_liste)
!end_node
!end_node

!else

!begin_node x_form_error

(!begin_liste) [Beschreibung]

!item [Name:]
ØForm ErrorÆ - stellt eine Fehlerbox fÅr TOS-Fehler dar.

!item [AES-Nummer:]
28945

!item [Deklaration:]
int16_t x_form_error ( uint8_t *fmt, int16_t errnum );

!item [Beschreibung:]
This function takes the (!nolink [error]) code specified by (!I)errnum(!i)
and finds an appropriate error message string. It then inserts this text
into a program-defined alert string and displays an alert.

The (!I)fmt(!i) should be in standard form_alert format, with a "%s" to
indicate the location where the error message should be inserted. Since
an alert can contain no more than five lines of 30 characters each, and the
pre-defined error messages can take up to three lines, there should be no
more than two lines of text surrounding the inserted error text.

Example:
!begin_verbatim
if( x_form_error( "[1][Error!|%s][Continue|Quit]", -33 ) == 1 )
  continue...
else quit...
!end_verbatim

!item [Ergebnis:]
Als Ergebnis wird die Nummer (1-3) der ausgewÑhlten Option zurÅckgegeben.

!item [VerfÅgbar:]
Die Funktion steht nur unter Geneva zur VerfÅgung.

!item [Gruppe:]
(!link [Formulare][Formularfunktionen])

!item [Querverweis:]
(!link [Binding] [Bindings fÅr x_form_error]) ~ form_error ~ form_xerr ~
form_err in N.AES

(!ende_liste)



!begin_node Bindings fÅr x_form_error
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
int16_t x_form_error ( uint8_t *fmt, int16_t errnum );

!item [Umsetzung:]
!begin_verbatim
int16_t x_form_error ( uint8_t *fmt, int16_t errnum )
{
   int_in[0] = errnum;

   adrin[0] = fmt;

   return ( crys_if(28945) );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
control   !! control[0] !! 28945 # Opcode der Funktion
control+2 !! control[1] !! 1     # EintrÑge in int_in
control+4 !! control[2] !! 1     # EintrÑge in int_out
control+6 !! control[3] !! 1     # EintrÑge in addr_in
control+8 !! control[4] !! 0     # EintrÑge in addr_out
addr_in   !! addr_in[0] !! fmt
int_in    !! int_in[0]  !! enum
int_out   !! int_out[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node
!end_node

!endif
