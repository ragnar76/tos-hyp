!iflang [english]

!begin_node vex_wheelv

(!begin_liste) [Availability]

!item [Name:]
ØExchange wheel interrupt vectorÆ - Adapt the interrupt vector for the
mouse wheel.

!item [Opcode:]
134

!item [Syntax:]
void vex_wheelv ( int16_t handle, void *new, void **old );

!item [Description:]
The call vex_wheelv installs a routine which is called by the (!nolink [VDI])
every time a mouse wheel event occurs. d0.w contain the wheel_number, d1.w
contain the wheel_amount of the wheel from the mouse. The subroutine must save
and restore modified registers and call the old interrupt routine.

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [new]
Address of the new routine
!item [old]
Address of the old routine
!end_xlist

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
As of MilanTOS 4.08 Release 5.10.2002, not yet documented, internals may
still change.

!item [Group:]
Input functions

!item [See also:]
(!link [Binding] [Bindings for vex_wheelv]) ~ vex_butv ~ vex_motv ~ vex_curv ~
vex_timv

(!ende_liste)
!end_node



!begin_node Bindings for vex_wheelv
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vex_wheelv ( int16_t handle, void *new, void **old );

!item [Binding:]
!begin_verbatim
void vex_wheelv ( int16_t handle, void *new, void **old )
{
   contrl[0] = 134;
   contrl[1] = 0;
   contrl[3] = 0;
   contrl[6] = handle;
   contrl[7..8] = new;

   vdi ();

   *old = contrl[9..10];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]     !! 134   # Function Opcode
contrl+2  !! contrl[1]     !! 0     # Entry in ptsin
contrl+4  !! contrl[2]     !! 0     # Entry in ptsout
contrl+6  !! contrl[3]     !! 0     # Entry in intin
contrl+8  !! contrl[4]     !! 0     # Entry in intout
contrl+12 !! contrl[6]     !! handle
contrl+14 !! contrl[7..8]  !! new
contrl+18 !! contrl[9..10] !! old
!end_table

(!ende_liste)
!end_node

!else

!begin_node vex_wheelv

(!begin_liste) [Beschreibung]

!item [Name:]
ØExchange wheel interrupt vectorÆ - stellt den Interruptvektor fÅr die
Mausradbewegung um.

!item [VDI-Nummer:]
134

!item [Deklaration:]
void vex_wheelv ( int16_t handle, void *new, void **old );

!item [Beschreibung:]
The call vex_wheelv installs a routine which is called by the (!nolink [VDI])
every time a mouse wheel event occurs. d0.w contain the wheel_number, d1.w
contain the wheel_amount of the wheel from the mouse. The subroutine must save
and restore modified registers and call the old interrupt routine.

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [new]
Adresse der neuen Routine
!item [old]
Adresse der alten Routine
!end_xlist

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Seit dem MilanTOS 4.08 Release 5.10.2002,  not yet documented, internals may
still change.

!item [Gruppe:]
Eingabefunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vex_wheelv]) ~ vex_butv ~ vex_motv ~ vex_curv ~
vex_timv

(!ende_liste)
!end_node



!begin_node Bindings fÅr vex_wheelv
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vex_wheelv ( int16_t handle, void *new, void **old );

!item [Umsetzung:]
!begin_verbatim
void vex_wheelv ( int16_t handle, void *new, void **old )
{
   contrl[0] = 134;
   contrl[1] = 0;
   contrl[3] = 0;
   contrl[6] = handle;
   contrl[7..8] = new;

   vdi ();

   *old = contrl[9..10];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]     !! 134   # Opcode der Funktion
contrl+2  !! contrl[1]     !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2]     !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]     !! 0     # EintrÑge in intin
contrl+8  !! contrl[4]     !! 0     # EintrÑge in intout
contrl+12 !! contrl[6]     !! handle
contrl+14 !! contrl[7..8]  !! new
contrl+18 !! contrl[9..10] !! old
!end_table

(!ende_liste)
!end_node

!endif
