!iflang [english]

!begin_node vrq_locator

(!begin_liste) [Availability]

!item [Name:]
ØInput locator, Request modeÆ - Obtain the mouse position when a key was
pressed.

!item [Opcode:]
28

!item [Syntax:]
void vrq_locator ( int16_t handle, int16_t x, int16_t y, int16_t *xout,
                   int16_t *yout, int16_t *term );

!item [Description:]
The call vrq_locator ascertains or sets the position of the graphic cursor
(the 'locator') in REQUEST mode. The following apply:

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [x]
Initial X-coordinate, (!U)and(!u)
!item [y]
Y-coordinate of the graphic cursor
!item [xout]
Final X-coordinate, (!U)and(!u)
!item [yout]
Y-coordinate of graphic cursor on return
!item [term]
The low byte contains a character terminator. For keyboard-terminated locator
input, this is the ASCII character code of the key struck to terminate input. For
nonkeyboard-terminated input (tablet, mouse, and so on), valid locator
termina!-tors begin with 20 Hex (space) and increase from there.
!end_xlist

The user only gets the result when a key is pressed. The graphic cursor is
always visible on the screen at the specified position in the current form.
One should note that any desired key (including the mouse buttons) may be
pressed.

Normally the movement of the graphic cursor takes place in large steps when the
cursor keys are pressed, or in small steps when these are pressed in combination
with the Shift key. On the Atari, however, the Alternate key is required as well.
               
!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
The function is not supported by all device drivers.
The input functions of the (!nolink [VDI]) work only on the (!I)physical(!i)
workstation, which is normally used by the (!nolink [AES]).

!item [Group:]
Input functions

!item [See also:]
(!link [Binding] [Bindings for vrq_locator]) ~ vsm_locator ~ vsin_mode

(!ende_liste)
!end_node



!begin_node Bindings for vrq_locator
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vrq_locator ( int16_t handle, int16_t x, int16_t y, int16_t *xout,
                   int16_t *yout, int16_t *term );

!item [Binding:]
!begin_verbatim
void vrq_locator (int16_t handle, int16_t x, int16_t y,
                  int16_t *xout, int16_t *yout, int16_t *term)
{
   ptsin[0] = x;
   ptsin[1] = y;

   contrl[0] = 28;
   contrl[1] = 1;
   contrl[3] = 0;
   contrl[6] = handle;

   vdi ();

   *xout = ptsout[0];
   *yout = ptsout[1];
   *term = intout[0];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0] !! 28    # Function Opcode
contrl+2  !! contrl[1] !! 1     # Entry in ptsin
contrl+4  !! contrl[2] !! 1     # Entry in ptsout
contrl+6  !! contrl[3] !! 0     # Entry in intin
contrl+8  !! contrl[4] !! 1     # Entry in intout
contrl+12 !! contrl[6] !! handle
ptsin     !! ptsin[0]  !! x
ptsin+2   !! ptsin[1]  !! y
intout    !! intout[0] !! term
ptsout    !! ptsout[0] !! xout
ptsout+2  !! ptsout[1] !! yout
!end_table

(!ende_liste)
!end_node

!else

!begin_node vrq_locator

(!begin_liste) [Beschreibung]

!item [Name:]
ØInput Locator, Request ModeÆ - ermittel die Mausposition, wenn eine Taste
gedrÅckt wurde.

!item [VDI-Nummer:]
28

!item [Deklaration:]
void vrq_locator ( int16_t handle, int16_t x, int16_t y, int16_t *xout,
                   int16_t *yout, int16_t *term );

!item [Beschreibung:]
Die Funktion ermittelt bzw. setzt die Position des Grafik-Cursors. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [x]
x-Koordinate
!item [y]
y-Koordinate des Grafikcursors
!item [xout]
x-Koordinate
!item [yout]
y-Koordinate des Grafikcursors bei der RÅckgabe
!item [term]
im Low-Byte wird der Code der Abbruch-Taste eingetragen. Dies ist
normalerweise der ASCII-Code. Spezielle Werte wie z.B. die Maustasten
erhalten jedoch Werte ab 32 und kînnen so nicht direkt von Tasten der
Tastatur unterschieden werden.
!end_xlist

Das Ergebnis erhÑlt der Benutzer erst, wenn eine Taste gedrÅckt wird. Der
Grafikcursor wird stets an der angegebenen Position in der aktuellen Form
auf dem Bildschirm sichtbar. Zu beachten ist, daû jede beliebige Taste (also
auch die Maustasten) gedrÅckt werden darf.

Normalerweise erfolgt eine Bewegung des Grafikcursors in groûen Schritten,
wenn die Cursortasten gedrÅckt werden, bzw. in kleinen Schritten, wenn
diese in Verbindung mit der Shift-Taste gedrÅckt werden. Auf dem Atari wird
jedoch zusÑtzlich die Alternate-Taste benîtigt.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Die Funktion wird nicht von allen GerÑtetreibern
unterstÅtzt. Die Eingabefunktionen des VDI arbeiten nur auf der
(!I)physikalischen(!i) Workstation, die im Normalfall von den AES benutzt
wird.

!item [Gruppe:]
Eingabefunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vrq_locator]) ~ vsm_locator ~ vsin_mode

(!ende_liste)
!end_node



!begin_node Bindings fÅr vrq_locator
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vrq_locator ( int16_t handle, int16_t x, int16_t y, int16_t *xout,
                   int16_t *yout, int16_t *term );

!item [Umsetzung:]
!begin_verbatim
void vrq_locator (int16_t handle, int16_t x, int16_t y,
                  int16_t *xout, int16_t *yout, int16_t *term)
{
   ptsin[0] = x;
   ptsin[1] = y;

   contrl[0] = 28;
   contrl[1] = 1;
   contrl[3] = 0;
   contrl[6] = handle;

   vdi ();

   *xout = ptsout[0];
   *yout = ptsout[1];
   *term = intout[0];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0] !! 28    # Opcode der Funktion
contrl+2  !! contrl[1] !! 1     # EintrÑge in ptsin
contrl+4  !! contrl[2] !! 1     # EintrÑge in ptsout
contrl+6  !! contrl[3] !! 0     # EintrÑge in intin
contrl+8  !! contrl[4] !! 1     # EintrÑge in intout
contrl+12 !! contrl[6] !! handle
ptsin     !! ptsin[0]  !! x
ptsin+2   !! ptsin[1]  !! y
intout    !! intout[0] !! term
ptsout    !! ptsout[0] !! xout
ptsout+2  !! ptsout[1] !! yout
!end_table

(!ende_liste)
!end_node

!endif
