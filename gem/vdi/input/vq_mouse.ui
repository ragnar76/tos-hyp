!iflang [english]

!begin_node vq_mouse

(!begin_liste) [Availability]

!item [Name:]
ØSample mouse button stateÆ - Obtain position and status of the mouse buttons.

!item [Opcode:]
124

!item [Syntax:]
void vq_mouse ( int16_t handle, int16_t *pstatus, int16_t *x, int16_t *y );

!item [Description:]
The call vq_mouse obtains the current cursor position and the current status of
the mouse buttons. The following apply:

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [pstatus]
Mouse button state
!begin_xlist !short
!item [Bit-0 =]
Left mouse button
!item [Bit-1 =]
Right mouse button (etc.)
!end_xlist
!item [x]
X-position of cursor
!item [y]
Y-position of cursor
!end_xlist

In GEM programs one should use the (!nolink [AES]) function graf_mkstate to
ensure that only the information about the position and state of the mouse
buttons intended for one's own application is obtained.

(!B)Note:(!b) The input functions of the (!nolink [VDI]) work only on the
(!I)physical(!i) workstation, which is normally used by the (!nolink [AES]).
Therefore it is better to fall back to using (!nolink [graf_mkstate]) or the
(!link [event functions][Event library]) instead.

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
Supported by all screen drivers.

!item [Group:]
Input functions

!item [See also:]
(!link [Binding] [Bindings for vq_mouse]) ~ graf_mkstate

(!ende_liste)
!end_node



!begin_node Bindings for vq_mouse
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vq_mouse ( int16_t handle, int16_t *pstatus, int16_t *x, int16_t *y );

!item [Binding:]
!begin_verbatim
void vq_mouse (int16_t handle, int16_t *pstatus, int16_t *x,
               int16_t *y)
{
   contrl[0] = 124;
   contrl[1] = 0;
   contrl[3] = 0;
   contrl[6] = handle;

   vdi ();

   *pstatus = intout[0];
   *x = ptsout[0];
   *y = ptsout[1];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0] !! 124   # Function Opcode
contrl+2  !! contrl[1] !! 0     # Entry in ptsin
contrl+4  !! contrl[2] !! 1     # Entry in ptsout
contrl+6  !! contrl[3] !! 0     # Entry in intin
contrl+8  !! contrl[4] !! 1     # Entry in intout
contrl+12 !! contrl[6] !! handle
intout    !! intout[0] !! pstatus
ptsout    !! ptsout[0] !! x
ptsout+2  !! ptsout[1] !! y
!end_table

(!ende_liste)
!end_node

!else

!begin_node vq_mouse

(!begin_liste) [Beschreibung]

!item [Name:]
ØSample Mouse Button StateÆ - ermittelt Position und Status der Maustasten.

!item [VDI-Nummer:]
124

!item [Deklaration:]
void vq_mouse ( int16_t handle, int16_t *pstatus, int16_t *x, int16_t *y );

!item [Beschreibung:]
Die Funktion ermittelt die Position und den Status der Maustasten. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [pstatus]
Status der Maustasten
!begin_xlist !short
!item [Bit-0 =]
linke Taste
!item [Bit-1 =]
Taste rechts daneben (etc.)
!end_xlist
!item [x]
x-Koordinate
!item [y]
y-Koordinate des Grafikcursors
!end_xlist

In GEM-Programmen sollte die AES-Funktion graf_mkstate verwendet werden, um
nur die fÅr die eigene Applikation bestimmten Informationen Åber Position
und Status der Maustastenstatus zu erhalten.

(!B)Hinweis:(!b) Die Eingabefunktionen des VDI arbeiten nur auf der
(!I)physikalischen(!i) Workstation, die im Normalfall von den (!nolink [AES]) benutzt
wird. Deshalb sollte man besser auf (!nolink [graf_mkstate]) oder die Eventfunktionen
zurÅckgreifen.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Supported by all screen drivers.

!item [Gruppe:]
Eingabefunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vq_mouse]) ~ graf_mkstate

(!ende_liste)
!end_node



!begin_node Bindings fÅr vq_mouse
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vq_mouse ( int16_t handle, int16_t *pstatus, int16_t *x, int16_t *y );

!item [Umsetzung:]
!begin_verbatim
void vq_mouse (int16_t handle, int16_t *pstatus, int16_t *x,
               int16_t *y)
{
   contrl[0] = 124;
   contrl[1] = 0;
   contrl[3] = 0;
   contrl[6] = handle;

   vdi ();

   *pstatus = intout[0];
   *x = ptsout[0];
   *y = ptsout[1];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0] !! 124   # Opcode der Funktion
contrl+2  !! contrl[1] !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2] !! 1     # EintrÑge in ptsout
contrl+6  !! contrl[3] !! 0     # EintrÑge in intin
contrl+8  !! contrl[4] !! 1     # EintrÑge in intout
contrl+12 !! contrl[6] !! handle
intout    !! intout[0] !! pstatus
ptsout    !! ptsout[0] !! x
ptsout+2  !! ptsout[1] !! y
!end_table

(!ende_liste)
!end_node

!endif
