# Source: for contrl[2] = 1 original SpeedoGDOS Doku 4.xx

!iflang [english]

!begin_node vst_scratch

(!begin_liste) [Availability]

!item [Name:]
ØSet scratch buffer allocation modeÆ

!item [Opcode:] 244

!item [Syntax:]
void vst_scratch ( int16_t handle, int16_t mode );

!item [Description:]
The call vst_scratch selects the way that the scratch buffer is created.
The following apply:

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [mode]
Type of buffer
!begin_xlist [0 =]
!item [0 =]
Allocated size is large enough for bitmap and vector fonts with any
special (!link [text effects][Text effects]) (default)
!item [1 =]
Size is governed by the bitmap fonts; one should forgo text effects for
vector fonts
!item [2 =]
Do not create a scratch buffer, and forgo text effects
!end_xlist
!end_xlist

(!B)Notes:(!b) The scratch buffer is used for generation of text effects. As
vector fonts are freely scalable, one cannot allocate a unique size for the
scratch buffer.

Atari recommends that at least (!I)mode(!i) 1 is set prior to vst_load_fonts to
prevent scratch buffer overruns.

!item [(!nolink [Return]) value:]
This function does not return a result.

!item [Availability:]
FSM-GDOS, and SpeedoGDOS as of version 4.00.

!item [Group:]
Text attributes

!item [See also:]
(!link [Binding] [Bindings for vst_scratch]) ~ (!link [GDOS][About the GDOS])  ~
SpeedoGDOS ~ vst_effects

(!ende_liste)
!end_node

!begin_node Bindings for vst_scratch
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vst_scratch ( int16_t handle, int16_t mode );

!item [Binding:]
!begin_verbatim
void vst_scratch ( int16_t handle, int16_t mode );
{
   intin[0] = mode;

   contrl[0] = 244;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]    !! 244   # Function Opcode
contrl+2  !! contrl[1]    !! 0     # entry in ptsin
contrl+4  !! contrl[2]    !! 1     # entry in ptsout
contrl+6  !! contrl[3]    !! 1     # entry in intin
contrl+8  !! contrl[4]    !! 0     # entry in intout
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0]     !! mode
!end_table
(!ende_liste)
!end_node

!else

!begin_node vst_scratch

(!begin_liste) [Beschreibung]

!item [Name:]
ØSet scratch buffer allocation modeÆ - Scratch-Buffers

!item [VDI-Nummer:] 244

!item [Deklaration:]
void vst_scratch ( int16_t handle, int16_t mode );

!item [Beschreibung:]
Die Funktion legt die Art fest, mit der der Scratch-Buffers angelegt
werden soll. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [mode]
Art des Buffers
!begin_xlist [0 =]
!item [0 =]
BerÅcksichtigung von Bitmap- und Vektorfonts (default)
!item [1 =]
Grîûe richtet sich nach den Bitmap-Fonts. Auf Texteffekte fÅr Vektorfonts
sollte verzichtet werden.
!item [2 =]
keinen Scratch-Buffer anlegen, und auf (!nolink [Texteffekte]) verzichten
!end_xlist
!end_xlist

(!B)Hinweis:(!b) Der Scratch-Buffer dient der Generierung von Texteffekten.
Da Vektor-ZeichensÑtze frei skalierbar sind, kann dem Scratch-Buffer keine
eindeutige Grîûe zugeordnet werden.

!item [Ergebnis:]
Diese Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
Beim FSM-GDOS und SpeedoGDOS ab Version 4.00.

!item [Gruppe:]
Text-Attribute

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vst_scratch]) ~  (!link [GDOS][Das GDOS])  ~
SpeedoGDOS ~  vst_effects

(!ende_liste)
!end_node

!begin_node Bindings fÅr vst_scratch
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vst_scratch ( int16_t handle, int16_t mode );

!item [Umsetzung:]
!begin_verbatim
void vst_scratch ( int16_t handle, int16_t mode );
{
   intin[0] = mode;

   contrl[0] = 244;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]    !! 244   # Opcode der Funktion
contrl+2  !! contrl[1]    !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2]    !! 1     # EintrÑge in ptsout
contrl+6  !! contrl[3]    !! 1     # EintrÑge in intin
contrl+8  !! contrl[4]    !! 0     # EintrÑge in intout
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0]     !! mode
!end_table
(!ende_liste)
!end_node

!endif
