!iflang [english]

!begin_node vqt_cachesize

(!begin_liste) [Availability]

!item [Name:]
ØGet outline cache sizeÆ - Obtain the size of the vector character cache.

!item [Opcode:] 255

!item [Syntax:]
void vqt_cachesize ( int16_t handle, int16_t which_cache, int32_t *size );

!item [Description:]
The call vqt_cachesize obtains the size of the largest allocatable block of
memory in one of two vector character caches. The following apply:

!begin_xlist !short [which_cache]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [which_cache]
Cache:
!begin_xlist !short
!item [0 =]
Character bitmap cache
!item [1 =]
Cache for data structure
!end_xlist
!item [size]
Size of largest allocatable block of memory in the selected cache
!end_xlist

(!B)Notes:(!b) An application can estimate how much memory is needed to
generate a character, and issue a warning message if one tries to exceed
this. FSMGDOS will just put a message on the screen asking the user to reboot.

To estimate the memory required for a given character in the character bitmap
cache use the formula:

(Width in pixels + 7)/8 * height in pixels

The amount of memory for the data structure cache can be estimated from:

84 * (width + height)

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
FSMGDOS, as of SpeedoGDOS 4.00.

!item [Group:]
Inquire functions

!item [See also:]
(!link [Binding] [Bindings for vqt_cachesize]) ~ v_loadcache ~ v_savecache ~
v_flushcache
               
(!ende_liste)
!end_node

!begin_node Bindings for vqt_cachesize
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vqt_cachesize ( int16_t handle, int16_t which_cache, int32_t *size );

!item [Binding:]
!begin_verbatim
void vqt_cachesize ( int16_t handle, int16_t which_cache,
                     int32_t *size );
{
   intin[0] = which_cache;
   
   contrl[0] = 255;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();
   
   *size = intout[0..1];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0] !! 255   # Function Opcode
contrl+2  !! contrl[1] !! 0     # Entry in ptsin
contrl+4  !! contrl[2] !! 0     # Entry in ptsout
contrl+6  !! contrl[3] !! 1     # Entry in intin
contrl+8  !! contrl[4] !! 2     # Entry in intout
contrl+12 !! contrl[6] !! handle
intout    !! intout[0] !! Returnwert
!end_table

(!ende_liste)
!end_node

!else

!begin_node vqt_cachesize

(!begin_liste) [Beschreibung]

!item [Name:]
ØGet Outline cache sizeÆ - Ermitteln der Grîûe des Vektorzeichen-Caches.

!item [VDI-Nummer:] 255

!item [Deklaration:]
void vqt_cachesize ( int16_t handle, int16_t which_cache, int32_t *size );

!item [Beschreibung:]
Die Funktion ermittelt die Grîûe des Vektorzeichen-Caches. Es gilt:

!begin_xlist !short [which_cache]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [which_cache]
Cache
!begin_xlist !short
!item [0 =]
Bitmap-Cache
!item [1 =]
Cache fÅr Datenstruktur
!end_xlist
!item [size]
Grîûe des jeweiligen Caches
!end_xlist

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
FSMGDOS, ab SpeedoGDOS 4.00

!item [Gruppe:]
Auskunftsfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vqt_cachesize]) ~ v_loadcache ~ v_savecache ~
v_flushcache
               
(!ende_liste)
!end_node

!begin_node Bindings fÅr vqt_cachesize
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vqt_cachesize ( int16_t handle, int16_t which_cache, int32_t *size );

!item [Umsetzung:]
!begin_verbatim
void vqt_cachesize ( int16_t handle, int16_t which_cache,
                     int32_t *size );
{
   intin[0] = which_cache;
   
   contrl[0] = 255;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();
   
   *size = intout[0..1];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0] !! 255   # Opcode der Funktion
contrl+2  !! contrl[1] !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2] !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3] !! 1     # EintrÑge in intin
contrl+8  !! contrl[4] !! 2     # EintrÑge in intout
contrl+12 !! contrl[6] !! handle
intout    !! intout[0] !! Returnwert
!end_table

(!ende_liste)
!end_node

!endif
