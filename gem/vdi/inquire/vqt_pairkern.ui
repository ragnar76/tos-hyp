!iflang [english]

!begin_node vqt_pairkern

(!begin_liste) [Availability]

!item [Name:]
ØInquire pair kerning informationÆ - Obtain adjustment vector for character
pairs when using (!link [pair kerning][Pair kerning]).

!item [Opcode:]
235

!item [Syntax:]
void vqt_pairkern ( int16_t handle, int16_t ch1, int16_t ch2, fix31 *x, fix31 *y );

!item [Description:]
The call vqt_pairkern obtains the adjustment vector for two adjacent characters
if (!link [pair kerning][Pair kerning]) is in use. The following apply:

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [ch1]
Left member, (!U)and(!u)
!item [ch2]
Right member of character pair
!item [x]
X-adjustment in 1/65536 pixels
!item [y]
Y-adjustment in 1/65536 pixels
!end_xlist

(!B)Note:(!b)
If you want call vqt_pairkern from Pure C, you might have to write your own
binding, because some releases of the PCGEMLIB return ptsout[0-3] instead of
intout[0-3].
               
!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
As of SpeedoGDOS 4.0 and from NVDI 3.00 onwards.

!item [Group:]
Inquire functions

!item [See also:]
(!link [Binding] [Bindings for vqt_pairkern]) ~ vqt_trackkern ~ SpeedoGDOS ~ NVDI ~
Kerning ~ Track kerning ~ Pair kerning

(!ende_liste)
!end_node



!begin_node Bindings for vqt_pairkern
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vqt_pairkern ( int16_t handle, int16_t ch1, int16_t ch2, fix31 *x, fix31 *y );

!item [Binding:]
!begin_verbatim
void vqt_pairkern (int16_t handle, int16_t ch1, int16_t ch2,
                   fix31 *x, fix31 *y)
{
   intin[0] = ch1;
   intin[1] = ch2;

   contrl[0] = 235;
   contrl[1] = 0;
   contrl[3] = 2;
   contrl[6] = handle;

   vdi ();

   *x = intout[0..1];
   *y = intout[2..3];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]    !! 235   # Function Opcode
contrl+2  !! contrl[1]    !! 0     # Entry in ptsin
contrl+4  !! contrl[2]    !! 0     # Entry in ptsout
contrl+6  !! contrl[3]    !! 2     # Entry in intin
contrl+8  !! contrl[4]    !! 4     # Entry in intout
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0]     !! ch1
intin+2   !! intin[1]     !! ch2
intout    !! intout[0..1] !! x
intout+4  !! intout[2..3] !! y
!end_table

(!ende_liste)
!end_node

!else

!begin_node vqt_pairkern

(!begin_liste) [Beschreibung]

!item [Name:]
ØInquire pair kerning informationÆ - Korrekturfaktor fÅr Zeichen mit
Pair-Kerning ermitteln 

!item [VDI-Nummer:]
235

!item [Deklaration:]
void vqt_pairkern ( int16_t handle, int16_t ch1, int16_t ch2, fix31 *x, fix31 *y );

!item [Beschreibung:]
Die Funktion ermittelt den Korrekturfaktor fÅr zwei Zeichen im Falle des
Pair-Kernings. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [ch1]
erstes Zeichen
!item [ch2]
zweites Zeichen
!item [x]
x-Korrekturfaktor
!item [y]
y-Korrekturfaktor
!end_xlist

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis zurÅck.

!item [VerfÅgbar:]
ab SpeedoGDOS 4.0 und ab NVDI 3.00

!item [Gruppe:]
Auskunftsfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vqt_pairkern]) ~ vqt_trackkern ~ SpeedoGDOS ~ NVDI ~
Kerning ~ Track-Kerning ~ Pair-Kerning

(!ende_liste)
!end_node



!begin_node Bindings fÅr vqt_pairkern
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vqt_pairkern ( int16_t handle, int16_t ch1, int16_t ch2, fix31 *x, fix31 *y );

!item [Umsetzung:]
!begin_verbatim
void vqt_pairkern (int16_t handle, int16_t ch1, int16_t ch2,
                   fix31 *x, fix31 *y)
{
   intin[0] = ch1;
   intin[1] = ch2;

   contrl[0] = 235;
   contrl[1] = 0;
   contrl[3] = 2;
   contrl[6] = handle;

   vdi ();

   *x = intout[0..1];
   *y = intout[2..3];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]    !! 235   # Opcode der Funktion
contrl+2  !! contrl[1]    !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2]    !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3]    !! 2     # EintrÑge in intin
contrl+8  !! contrl[4]    !! 4     # EintrÑge in intout
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0]     !! ch1
intin+2   !! intin[1]     !! ch2
intout    !! intout[0..1] !! x
intout+4  !! intout[2..3] !! y
!end_table

(!ende_liste)
!end_node

!endif
