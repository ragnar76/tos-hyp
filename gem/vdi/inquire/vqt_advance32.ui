!iflang [english]

!begin_node vqt_advance32

(!begin_liste) [Availability]

!item [Name:]
ØInquire outline text advance placement vectorÆ -  Obtain more precise position
for the next vector character as two fix31 values.

!item [Opcode:]
247

!item [Syntax:]
void vqt_advance32 ( int16_t handle, int16_t ch, fix31 *x_advance,
                   fix31 *y_advance );

!item [Description:]
The call vqt_advance32 is a variant of vqt_advance calculating offsets
(advance vector and remainder) to be able to write the next character of a
string at the correct position, returned with greater precision as
two fix31 values. The following apply:

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [ch]
Character of interest
!item [x_advance]
X-advance in 1/65536 pixels
!item [y_advance]
Y-advance in 1/65536 pixels
!end_xlist

(!B)Notes:(!b) (!I)x_advance(!i) and (!I)y_advance(!i) added to the position
where the last character was rendered gives the place where to draw the next
character. The vector works in all directions and with all text rotations.

The function is required particularly when the angle for text rotation is
anything but 0, 90, 180 or 270 degrees.

Remember that (!I)x_advance(!i) and (!I)y_advance(!i) are only offsets used to
place the next character - they do not include parts of the character which
extend beyond the em-square.
               

!item [(!nolink [Return]) value:]
The function does not return a result.

!item [Availability:]
As of SpeedoGDOS 4.00 and as of NVDI 3.00. In the docs for (!nolink [NVDI])
3.00 this function is wrongly named as vqt_advance (it was corrected in
the (!nolink [NVDI]) 4.00 docs).

!item [Group:]
Inquire functions

!item [See also:]
(!link [Binding] [Bindings for vqt_advance32]) ~ vst_rotation ~ SpeedoGDOS ~ NVDI

(!ende_liste)
!end_node



!begin_node Bindings for vqt_advance32
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
void vqt_advance32 ( int16_t handle, int16_t ch, fix31 *x_advance,
                   fix31 *y_advance );

!item [Binding:]
!begin_verbatim
void vqt_advance32 (int16_t handle, int16_t ch,
                   fix31 *x_advance, fix31 *y_advance)
{
   intin[0] = ch;

   contrl[0] = 247;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();

   *x_advance = ptsout[4..5];
   *y_advance = ptsout[6..7];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0]    !! 247   # Function Opcode
contrl+2  !! contrl[1]    !! 0     # Entry in ptsin
contrl+4  !! contrl[2]    !! 4     # Entry in ptsout
contrl+6  !! contrl[3]    !! 1     # Entry in intin
contrl+8  !! contrl[4]    !! 0     # Entry in intout
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0]     !! ch
ptsout+8  !! ptsout[4..5] !! x_advance
ptsout+12 !! ptsout[6..7] !! y_advance
!end_table


Remember that (!I)x_advance(!i) and (!I)y_advance(!i) are only offsets used
to place the next character - they do not include parts of the character
which extend beyond the em-square.

(!ende_liste)
!end_node

!else

!begin_node vqt_advance32

(!begin_liste) [Beschreibung]

!item [Name:]
ØInquire Outline text advance placement vectorÆ - Position fÅr nÑchstes
Vektor-Zeichen ermitteln.

!item [VDI-Nummer:]
247

!item [Deklaration:]
void vqt_advance32 ( int16_t handle, int16_t ch, fix31 *x_advance,
                   fix31 *y_advance );

!item [Beschreibung:]
Die Funktion berechnet Offsets, um das nÑchste Zeichen eines Strings an die
richtige Position schreiben zu kînnen. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [ch]
interessierendes Zeichen
!item [x_advance]
x-Abstand in 1/65536 Pixeln
!item [y_advance]
y-Abstand in 1/65536 Pixeln
!end_xlist

(!B)Hinweis:(!b) Die Funktion wird inbesondere dann benîtigt, wenn der
Winkel fÅr Textrotationen ein anderer als 0, 90, 180 oder 270 Grad ist.

Bei den gelieferten Werten handelt es sich nur um den Abstand, der fÅr die
Positionierung des nÑchsten Zeichens benutzt wird, d.h. (!I)x_advance(!i)
beinhaltet (!I)keine(!i) ZeichenÅberhÑnge.

!item [Ergebnis:]
Die Funktion liefert kein Ergebnis.

!item [VerfÅgbar:]
ab SpeedoGDOS 4.00 und ab NVDI 3.00. In der Doku zu (!nolink [NVDI]) 3.00 wird
die Funktion fÑlschlicherweise vqt_advance genannt.

!item [Gruppe:]
Auskunftsfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vqt_advance32]) ~ vst_rotation ~ SpeedoGDOS ~ NVDI

(!ende_liste)
!end_node



!begin_node Bindings fÅr vqt_advance32
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
void vqt_advance32 ( int16_t handle, int16_t ch, fix31 *x_advance,
                   fix31 *y_advance );

!item [Umsetzung:]
!begin_verbatim
void vqt_advance32 (int16_t handle, int16_t ch,
                   fix31 *x_advance, fix31 *y_advance)
{
   intin[0] = ch;

   contrl[0] = 247;
   contrl[1] = 0;
   contrl[3] = 1;
   contrl[6] = handle;

   vdi ();

   *x_advance = ptsout[4..5];
   *y_advance = ptsout[6..7];
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0]    !! 247   # Opcode der Funktion
contrl+2  !! contrl[1]    !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2]    !! 4     # EintrÑge in ptsout
contrl+6  !! contrl[3]    !! 1     # EintrÑge in intin
contrl+8  !! contrl[4]    !! 0     # EintrÑge in intout
contrl+12 !! contrl[6]    !! handle
intin     !! intin[0]     !! ch
ptsout+8  !! ptsout[4..5] !! x_advance
ptsout+12 !! ptsout[6..7] !! y_advance
!end_table


Es handelt sich bei x_advance und y_advance nur um den Abstand, der fÅr die
Positionierung des nÑchsten Zeichens benutzt wird, d.h. x_advance beinhaltet
(!I)keine(!i) ZeichenÅberhÑnge.

(!ende_liste)
!end_node

!endif
