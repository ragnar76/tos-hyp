!iflang [english]

!begin_node vqt_char_index

(!begin_liste) [Availability]

!item [Name:]
ØInquire character indexÆ - Convert an index with reference to given mappings.

!item [Opcode:]
190 (Opcode 0)

!item [Syntax:]
uint16_t vqt_char_index ( int16_t handle, uint16_t scr_index,
                       int16_t src_mode, int16_t dst_mode );

!item [Description:]
The call vqt_char_index converts a passed character index from and to the
desired mapping encoding.

!begin_xlist !short [Parameter]
!item [Parameter]
Meaning
!item [~]
~
!item [handle]
Workstation identifier
!item [src_index]
Index to be converted
!item [src_mode]
(!B)Type of source mapping:(!b)
!begin_xlist !short
!item [0 =]
(!I)scr_index(!i) is a direct index
!item [1 =]
(!I)scr_index(!i) is an ASCII index
!item [2 =]
(!I)scr_index(!i) is a Unicode index
!end_xlist
!item [dst_mode]
(!B)Type of destination mapping:(!b)
!begin_xlist
!item [0 =]
is a direct index
!item [1 =]
is an ASCII index
!item [2 =]
is a Unicode index
!end_xlist
!end_xlist

(!B)Note:(!b) If you want to convert an index from ASCII to
ASCII, only the range from 32 to 255 is used. The (!nolink [control]) codes
are not translated, e.g. a call like vqt_char_index( handle, 10, 1, 0 )
returns 0xffff.

For example, to determine if the font contains a character with Unicode
0x201e ("quotedblbase", DOUBLE LOW-9 QUOTATION MARK), you should use the
following function:
               

!begin_verbatim
int16_t is_char_available (int16_t handle, uint16_t unicode)
{
   uint16_t dindex;

   /* Translate unicode into a direct index */
   dindex = vqt_char_index (handle, unicode, 2, 0);

   if (dindex == 0xffff)
      return (FALSE);        /* Character is available */
   else
      return (TRUE);         /* Not available */
}
!end_verbatim

!item [(!nolink [Return]) value:]
This function returns the converted index, or the value 0xffff if conversion
was not possible.

!item [Availability:]
since NVDI Version 4.00

!item [Group:]
Inquire functions

!item [See also:]
(!link [Binding] [Bindings for vqt_char_index]) ~ vst_charmap

(!ende_liste)
!end_node



!begin_node Bindings for vqt_char_index
!ignore_index

(!begin_liste) [GEM-Arrays]

!item [C:]
uint16_t vqt_char_index ( int16_t handle, uint16_t scr_index,
                       int16_t src_mode, int16_t dst_mode );

!item [Binding:]
!begin_verbatim
uint16_t vqt_char_index ( int16_t handle, uint16_t scr_index,
                          int16_t scr_mode, int16_t dst_mode )
{
   intin[0] = scr_index;
   intin[1] = src_mode;
   intin[2] = dst_mode;

   contrl[0] = 190;
   contrl[1] = 0;
   contrl[3] = 3;
   contrl[5] = 0;
   contrl[6] = handle;

   vdi ();

   return ( intout[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Address !! Element !! Contents
!hline
contrl    !! contrl[0] !! 190   # Function Opcode
contrl+2  !! contrl[1] !! 0     # Entry in ptsin
contrl+4  !! contrl[2] !! 0     # Entry in ptsout
contrl+6  !! contrl[3] !! 3     # Entry in intin
contrl+8  !! contrl[4] !! 1     # Entry in intout
contrl+10 !! contrl[5] !! 0
contrl+12 !! contrl[6] !! handle
intin     !! intin[0]  !! scr_index
intin+2   !! intin[1]  !! scr_mode
intin+4   !! intin[2]  !! dst_mode
intout    !! intout[0] !! Return Value
!end_table

(!ende_liste)
!end_node

!else

!begin_node vqt_char_index

(!begin_liste) [Beschreibung]

!item [Name:]
ØInquire Character IndexÆ - Konvertiert einen Index bzgl. eines bestimmten
Mappings.

!item [VDI-Nummer:]
190 (Opcode 0)

!item [Deklaration:]
uint16_t vqt_char_index ( int16_t handle, uint16_t scr_index,
                       int16_t src_mode, int16_t dst_mode );

!item [Beschreibung:]
Die Funktion konvertiert einen Åbergebenen Index anhand eines gewÅnschen
Mappings. Es gilt:

!begin_xlist !short [Parameter]
!item [Parameter]
Bedeutung
!item [~]
~
!item [handle]
Kennung der Workstation
!item [src_index]
zu konvertierender Index
!item [src_mode]
(!B)Art des Quell-Mappings(!b)
!begin_xlist !short
!item [0 =]
scr_index als direkter Index
!item [1 =]
scr_index als ASCII-Index
!item [2 =]
scr_index als Unicode-Index
!end_xlist
!item [dst_mode]
(!B)Art des Ziel-Mappings(!b)
!begin_xlist
!item [0 =]
direkter Index
!item [1 =]
ASCII-Index
!item [2 =]
Unicode-Index
!end_xlist
!end_xlist

(!B)Hinweis:(!b) Soll ein Index vom ASCII-Format ausgehend oder ins
ASCII-Format gewandelt werden, dann wird nur der Bereich von Index 32 bis
255 beachtet. Die Steuerzeichen von 0 bis 31 werden (!I)nicht(!i) gewandelt,
d.h. der Aufruf von vqt_char_index (handle, 10, 1, 0) liefert als Ergebnis
den Wert 0xffff.

Um z.B. zu ÅberprÅfen, ob der eingestellte Font ein Zeichen mit Unicode
0x201e (quotedblbase, 99er AnfÅhrungszeichen unten) enthÑlt, sollte die
folgende Funktion aufgerufen werden:

!begin_verbatim
int16_t is_char_available (int16_t handle, uint16_t unicode)
{
   uint16_t dindex;

   /* Unicode <unicode> in direkten Index wandeln */
   dindex = vqt_char_index (handle, unicode, 2, 0);

   if (dindex == 0xffff)
      return (FALSE);
   else
      return (TRUE);         
}
!end_verbatim

!item [Ergebnis:]
Die Funktion liefert den konvertierten Index zurÅck, bzw. den Wert 0xffff,
falls eine Konvertierung nicht mîglich war.

!item [VerfÅgbar:]
ab NVDI Version 4.00

!item [Gruppe:]
Auskunftsfunktionen

!item [Querverweis:]
(!link [Binding] [Bindings fÅr vqt_char_index]) ~ vst_charmap

(!ende_liste)
!end_node



!begin_node Bindings fÅr vqt_char_index
!ignore_index

(!begin_liste) [Umsetzung]

!item [C:]
uint16_t vqt_char_index ( int16_t handle, uint16_t scr_index,
                       int16_t src_mode, int16_t dst_mode );

!item [Umsetzung:]
!begin_verbatim
uint16_t vqt_char_index ( int16_t handle, uint16_t scr_index,
                          int16_t scr_mode, int16_t dst_mode )
{
   intin[0] = scr_index;
   intin[1] = src_mode;
   intin[2] = dst_mode;

   contrl[0] = 190;
   contrl[1] = 0;
   contrl[3] = 3;
   contrl[5] = 0;
   contrl[6] = handle;

   vdi ();

   return ( intout[0] );
}
!end_verbatim

!item [GEM-Arrays:]
!begin_table [l l l]
Adresse !! Feldelement !! Belegung
!hline
contrl    !! contrl[0] !! 190   # Opcode der Funktion
contrl+2  !! contrl[1] !! 0     # EintrÑge in ptsin
contrl+4  !! contrl[2] !! 0     # EintrÑge in ptsout
contrl+6  !! contrl[3] !! 3     # EintrÑge in intin
contrl+8  !! contrl[4] !! 1     # EintrÑge in intout
contrl+10 !! contrl[5] !! 0
contrl+12 !! contrl[6] !! handle
intin     !! intin[0]  !! scr_index
intin+2   !! intin[1]  !! scr_mode
intin+4   !! intin[2]  !! dst_mode
intout    !! intout[0] !! Return-Wert
!end_table

(!ende_liste)
!end_node

!endif
